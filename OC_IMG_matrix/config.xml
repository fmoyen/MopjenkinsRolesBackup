<?xml version='1.1' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.14">
  <actions/>
  <description>Builds bitstreams with different configurations and tests images on real HW if possible.&#xd;
In case of problems: please contact fabrice_moyen@fr.ibm.com or alexandre.castellane@fr.ibm.com&#xd;
Only AD9V3 card is available for test on Orpington&#xd;
Vivado version used : tests on going for 2019.1 (issue with lsf / RH7)&#xd;
&#xd;
WARNING : P9 ocaccel_find_card is used with OC-$CRD prefix&#xd;
&#xd;
Main Issues : &#xd;
- oc-flash not operational&#xd;
- after flashing the oc-reset doesn&apos;t cut the power supply, and FPGA is not refreshed !! Need &quot;Power9 reload routine&quot;&#xd;
&#xd;
=&gt; hdl_example.NORAM had an issue at config level (same as for CAPI2) to be confirmed&#xd;
=&gt; ID are not coherent with SNAP IDs</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.4">
      <projectUrl>https://github.com/OpenCAPI/oc-accel/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Choose the branch for https://github.com/OpenCAPI/oc-accel you want to test.</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OCSE_BRANCH</name>
          <description>Choose the branch for https://github.com/OpenCAPI/ocse you want to test.
(OpenCapi Simulation Engine)</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_CHOICE</name>
          <description>Choose the Vivado version to use</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2019.1</string>
              <string>2018.3</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HDL</name>
          <description>enable/disable the HDL examples</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HLS</name>
          <description>enable/disable the HLS examples</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD9V3</name>
          <description>enable/disable the AD9V3 card</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD9H3</name>
          <description>enable/disable the AD9H3 card</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD9H7</name>
          <description>enable/disable the AD9H7 card</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>INNOVA2</name>
          <description>enable/disable the INNOVA2 card</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>TEST_ON_HW</name>
          <description>Enable/disable testing on HW
(Disabled by default as oc-flash + oc-reset does&apos;t work yet =&gt; need to reboot to get the code !)
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LIST_TEST_CARDS</name>
          <description>List of the cards available for HW testing</description>
          <defaultValue>AD9V3</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TIMING_LABLIMIT_CHOICE</name>
          <description>Choose the TIMING_LABLIMIT parameter. If timing is higher than your choice when doing a make image, the run will failed.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>-1000</string>
              <string>-300</string>
              <string>-600</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mopBoxes</name>
          <description>List of Montpellier systems available for testing :
  - orpington: AC922 8335-GTH with two AD9V3s 1 in CAPI2 and 1 OC
(it needs to define capimop user with authorized_keys)</description>
          <defaultValue>orpington</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>austinBoxes</name>
          <description>List of Austin systems available for testing :
(Assuming no VPN or jump server is needed to access Austin servers, 9.X.X.X addresses)
(it needs to define capimop user with authorized_keys)</description>
          <defaultValue>hawklp10.aus.stglabs.ibm.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>1</maxConcurrentPerNode>
      <maxConcurrentTotal>10</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
      <limitOneJobWithMatchingParams>true</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>false</throttleMatrixBuilds>
        <throttleMatrixConfigurations>true</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:OpenCAPI/oc-accel.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>oc-accel</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>true</recursiveSubmodules>
        <trackingSubmodules>false</trackingSubmodules>
        <reference></reference>
        <parentCredentials>false</parentCredentials>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
    </extensions>
  </scm>
  <assignedNode>X86_UBUNTU</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>ACT</name>
      <values>
        <string>hdl_example.noRAM</string>
        <string>hdl_example.BRAM</string>
        <string>hdl_example.DDR</string>
        <string>hdl_single_engine</string>
        <string>hls_helloworld</string>
        <string>hls_memcopy_1024</string>
        <string>test</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>CRD_CL</name>
      <values>
        <string>AD9V3_nCL</string>
        <string>AD9H3_nCL</string>
        <string>AD9H7_nCL</string>
        <string>INNOVA2_nCL</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>X86_UBUNTU</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <combinationFilter>(  ((ACT=~&quot;hls&quot; &amp;&amp; HLS==&quot;true&quot;)||(ACT=~&quot;hdl&quot; &amp;&amp; HDL==&quot;true&quot; ))  &amp;&amp; ( (CRD_CL=~&quot;AD9V3&quot;  &amp;&amp; AD9V3==&quot;true&quot;) || (CRD_CL=~&quot;INNOVA2&quot;  &amp;&amp; INNOVA2==&quot;true&quot;) || ( CRD_CL=~&quot;AD9H&quot; &amp;&amp; (AD9H3==&quot;true&quot;|| AD9H7==&quot;true&quot;) &amp;&amp; !(ACT=~&quot;DDR&quot;) ) )  ) || (ACT==&quot;test&quot; &amp;&amp; CRD_CL==&quot;AD9V3&quot;) </combinationFilter>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set +x                           # reduce Jenkins output

echo
echo &quot;****************************************************************************************&quot;
echo &quot;`date` BUILD START&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;EXECUTING OpenCAPI IMG FIRST SHELL FROM MOPJENKINS ...&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;Hostname: `hostname`&quot;; echo &quot;ID: `id`&quot;
echo &quot;Working dir is : $PWD&quot;
echo


#==============================================================================================
# Variables

&gt; export_props.properties
NAME=$(echo $GIT_BRANCH| cut -d&apos;/&apos; -f 2 |tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;) # remove origin/ from branch and translate to lowercase
PREFIX=$(echo $NAME| cut -d&apos;_&apos; -f 1)    # chars up to first &apos;_&apos; identify need for test
ACTION_TYPE=$(echo $ACT| cut -d&apos;_&apos; -f 1 |tr &apos;[:lower:]&apos; &apos;[:upper:]&apos;) # get ACTION_TYPE (hls, hld) and translate to uppercase
CRD=$(echo $CRD_CL| cut -d&apos;_&apos; -f 1)    # chars up to  first &apos;_&apos; identify card
CL=$(echo $CRD_CL| cut -d&apos;_&apos; -f 2)     # chars behind first &apos;_&apos; identify Cloud build

echo &quot;Build with Card=$CRD Action=$ACT Action_type=$ACTION_TYPE CLOUD_build=$CL branch_selected=$BRANCH git_branch=$NAME prefix=$PREFIX test_on_hw=$TEST_ON_HW&quot;

EmailDestinationList=( fabrice_moyen@fr.ibm.com fabricepb@free.fr )
HWUser=&quot;capimop&quot;


#==============================================================================================
# Functions

# Function for sending alerting emails
# Example 1: SendAnEmail -s &quot;This is the subject/alert&quot; -d firstDest@gmail.com -d SecondDest@free.fr
# Example 2: SendAnEmail -s &quot;This is the subject/alert&quot; -d &quot;${EmailDestinationList[*]}&quot;
function SendAnEmail
{
  local OPTIND opt DestList
  while getopts &quot;s:d:&quot; opt
  do 
    case $opt in
      s)
        Subject=&quot;$OPTARG&quot;
      ;;
      d)
        DestList+=(&quot;$OPTARG&quot;)
      ;;
    esac
  done
  
  for i in ${DestList[@]}
  do
    echo &quot;&quot; | mail -s &quot;$Subject&quot; $i
  done
}


#==============================================================================================
# Do not run non-desired cases (action types, actions, cards)
# BSKIP stands for board skip

BSKIP=0

if [ &quot;${!ACTION_TYPE}&quot; == &quot;false&quot; ]; then BSKIP=1;fi # if ACTION_TYPE=&quot;HLS&quot;, ${!ACTION_TYPE} is identical to $HLS
if [ &quot;${!CRD}&quot;         == &quot;false&quot; ]; then BSKIP=1;fi # if CRD=&quot;AD9V3&quot;, ${!CRD} is identical to $AD9V3
if [ &quot;$ACT&quot;            == &quot;test&quot;  ]; then BSKIP=0;fi

echo &quot;action_types (hdl,hls)=$ACTION_TYPE enabled_cards=$CRD BSKIP=$BSKIP&quot;

# Following filtering will stop the current test if not required or not possible
# This will lead to a brown colored result meaning : aborted
# ASKIP may stand for ACTION skip
case &quot;$CRD:$ACT&quot; in
  * )                      C=&quot;def &quot;;ASKIP=0;; # def=default
esac        

echo &quot;card=$CRD action=$ACT case=$C ASKIP=$ASKIP&quot;


#==============================================================================================
# Cleaning directories if ACT=test,
# else checking $CRD.$ACT.defconfig file existence

echo;echo &quot;***********************************************************&quot;

if [ $ASKIP -eq 0 ]
then 

 case &quot;$ACT&quot; in
  test )
    echo &quot;ACT=test&quot;
    echo
    gitnames=`git ls-remote ${GIT_URL}|grep &quot;refs/heads/&quot;|awk &apos;{print $2}&apos;`;RC=$?
    echo &quot;gitnames= $gitnames&quot;

    echo
    for dir in &quot;/var/jenkins/workspace/OC_IMG_matrix&quot;/*;do    
      if [ -d &quot;$dir&quot; ];then
        branch=&quot;refs/heads/&quot;`basename $dir`
        if [[ &quot;$gitnames&quot; =~ &quot;$branch&quot; ]];then echo &quot;branch=$branch found in gitnames, keeping dir=$dir&quot;
        else 
          echo &quot;branch=$branch not found in gitnames, deleting dir=\&apos;$dir\&apos;&quot;
          rm -rf &quot;$dir&quot;     # put in quotes to work for directories with blanks
        fi        
      else echo &quot;$dir is not a directory, continuing&quot;
      fi
    done
    DSKIP=0;;

  * )
    echo &quot;Checking oc-accel/defconfig/$CRD.$ACT.defconfig existence&quot;
    if [ -f oc-accel/defconfig/$CRD.$ACT.defconfig ]
    then
      echo &quot; --&gt; OK&quot;
      DSKIP=0
    else 
      echo;echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
      echo &quot;$CRD.$ACT.defconfig does not exist&quot;
      echo &quot;Aborting...&quot;
      echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;;echo
      echo; ls oc-accel/defconfig/
      DSKIP=1
    fi;;  
esac
echo;echo &quot;defconfig DSKIP=$DSKIP&quot;


#==============================================================================================
# Checking enough space is available

echo;echo &quot;***********************************************************&quot;
echo &quot;J: Checking enough space is available&quot;
#AFSused=`fs lq /afs/bb/proj/fpga/framework/CI_ws/OC_SNAP_IMG_matrix/|grep -v Used|awk &apos;{print $4}&apos;|sed &apos;s/%//g&apos;|sed &apos;s/&lt;//g&apos;`
diskused=`df -h /var/jenkins/workspace/OC_IMG_matrix|grep -v Used|awk &apos;{print $5}&apos;|sed &apos;s/%//g&apos;|sed &apos;s/&lt;//g&apos;`
SSKIP=0;msg=&quot;disk usage =${diskused}%&quot;

if   (( diskused &gt; 90 ));then 
  msg=&quot;ERROR: $msg, stopping additional builds&quot;;SSKIP=1
  #SendAnEmail -s &quot;ERROR: OpenCAPI AFS space SIMULATION is used up to ${diskused}%, stopping additional builds&quot; -d &quot;${EmailDestinationList[*]}&quot;
  #SendAnEmail -s &quot;ERROR: AFS space SIMULATION is used up to ${AFSused}%, stopping additional builds&quot; -d &quot;${EmailDestinationList[*]}&quot;  

elif (( diskused &gt; 70 ));then
   msg=&quot;WARNING: $msg&quot;
  #SendAnEmail -s &quot;WARNING: OpenCAPI space IMAGETEST is used up to ${diskused}%&quot; -d &quot;${EmailDestinationList[*]}&quot;
  #SendAnEmail -s &quot;WARNING: AFS space IMAGETEST is used up to ${AFSused}%&quot; -d &quot;${EmailDestinationList[*]}&quot;  

else
   msg=&quot;OK: $msg&quot;
fi
echo &quot;$msg&quot;

fi # end of if ASKIP

if [ &quot;$ASKIP&quot; == &quot;1&quot; ] || [ &quot;$DSKIP&quot; == &quot;1&quot; ] || [ &quot;$BSKIP&quot; == &quot;1&quot; ] || [ &quot;$SSKIP&quot; == &quot;1&quot; ];then SKIP=1;else SKIP=0;fi


#==============================================================================================
# Passing parameters to next script

echo;echo &quot;***********************************************************&quot;
echo &quot;J: Forwarding parameters to next script&quot;
echo &quot;SKIP=$SKIP&quot; &gt; export_props.properties
echo &quot;CRD=$CRD&quot; &gt;&gt; export_props.properties
echo &quot;CL=$CL&quot; &gt;&gt; export_props.properties
echo &quot;EmailDestinationList=( ${EmailDestinationList[*]} )&quot; &gt;&gt; export_props.properties
echo &quot;HWUser=${HWUser}&quot; &gt;&gt; export_props.properties

echo &quot;properties forwarded to next shell:&quot;
cat export_props.properties
echo &quot;***********************************************************&quot;
echo</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>export_props.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.2">
        <token>$SKIP</token>
      </condition>
      <buildStep class="org.jenkins_ci.plugins.fail_the_build.FixResultBuilder" plugin="fail-the-build-plugin@1.0">
        <defaultResultName>ABORTED</defaultResultName>
        <success></success>
        <unstable></unstable>
        <failure></failure>
        <aborted></aborted>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set +x                            # reduce Jenkins output
ulimit -c unlimited               # limit core dumps

echo;echo &quot;****************************************************************************************&quot;
echo &quot;EXECUTING SECOND OpenCAPI SHELL FROM MOPJENKINS ...&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;SKIP forwarded from previous script = $SKIP&quot;
if [ $SKIP -eq 1 ]
then
  echo &quot;SKIP=$SKIP ==&gt; Exiting...&quot;
  exit 0  #&quot;temporarily setting not available as success !
fi
echo &quot;Building with Card=$CRD Action=$ACT CLOUD=$CL&quot;


#==============================================================================================
# Variables

export PATH=$PATH:/usr/local/bin  # python3 needs this path setup
export USERHOME=`pwd`
export OCACCEL_ROOT=$USERHOME/oc-accel

TESTBOXES=( ${austinBoxes[*]} ${mopBoxes[*]}) # init array of systems
echo &quot;testboxes now = ${TESTBOXES[@]}&quot;
RootSaveDir=/data/Images

#echo;echo &quot;********************************************************************************&quot;
#echo &quot;J: LSF SETUP ...&quot;

# older setup up to RH6
#export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/bin
#export LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/etc
#export LSF_LIBDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/lib
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/lib
#export LSF_BINDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/bin
#export LSF_SUBMITTER_OSTYPE=Linux
#export LSF_ENVDIR=/home/lsfbb/prod/conf
#LSF=&apos;-P zsort -M 2 -C 2000 -I -n 4 -R type=X86_64 -R span[hosts=1]&apos;  # Project, GB_mem, KB_core, #_processors, type of processor

# new setup for RH7
#export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
#export LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/etc
#export LSF_LIBDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
#export LSF_BINDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
#export LSF_SUBMITTER_OSTYPE=Linux
#export LSF_ENVDIR=/home/lsfbb/prod/conf
#LSF=&apos;-P zsort -M 2 -C 2000 -I -n 4 -R type=X86_64  -R osver=rh7 -R span[hosts=1]&apos;  # Project, GB_mem, KB_core, #_processors, type of processor


#==============================================================================================
# Functions

# Function for sending alerting emails
# Example 1: SendAnEmail -s &quot;This is the subject/alert&quot; -d firstDest@gmail.com -d SecondDest@free.fr
# Example 2: SendAnEmail -s &quot;This is the subject/alert&quot; -d &quot;${EmailDestinationList[*]}&quot;
function SendAnEmail
{
  local OPTIND opt DestList
  while getopts &quot;s:d:&quot; opt
  do 
    case $opt in
      s)
        Subject=&quot;$OPTARG&quot;
      ;;
      d)
        DestList+=(&quot;$OPTARG&quot;)
      ;;
    esac
  done
  
  for i in ${DestList[@]}
  do
    echo &quot;&quot; | mail -s &quot;$Subject&quot; $i
  done
}

#==============================================================================================
# OpenCAPI Simulation Engine (ocse) setup
# Should not be used but may be required by ??

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Getting OpenCAPI Simulation Environment (ocse)...&quot;

echo;echo &quot;Current directory is : $PWD&quot;
ls -al

echo;echo &quot;Deleting old ./ocse (OpenCAPI Simulation Engine) directory&quot;
rm -rf ocse

# When Lance Thomson makes a mod in his OCSE, we might use a specific branch for test
# 2019 Nov 04 he merged the issue_2 into master (removing the debug messages)

echo;echo &quot;Getting (git clone) OpenCAPI Simulation Environment (ocse) branch=$OCSE_BRANCH for card=$CRD...&quot;
git clone -b $OCSE_BRANCH https://github.com/OpenCAPI/ocse ocse;echo &quot;git clone OCSE RC=$?&quot;

export OCSE_INSTALL_DIR=${USERHOME}/ocse   # ca ne sert à rien on dirait !!
echo;echo &quot;Exporting ocse directory as : ${USERHOME}/ocse into snap_env.sh&quot;
echo &quot;export OCSE_ROOT=${USERHOME}/ocse&quot; &gt;snap_env.sh


#==============================================================================================
# Cleaning previous TL/DL &amp; getting TL:DL zip files

# FAB a vérifier si encore nécessaire. A priori non
#echo;echo &quot;****************************************************************************************&quot;
#echo &quot;J: Cleaning any previous TL/DL and getting TL/DL zip files&quot;
#cd ${OCACCEL_ROOT}
#make clean                    # to make sure we restart from a blank snap
#rm -rf hardware/oc-bip        # to make sure we restart from a blank capi-bsp
#echo &quot;J: git cloning oc-bip&quot;
#git submodule init            # to get the oc-bip
#git submodule update
# collecting the TL/DL definition
#echo &quot;J: Getting the zip file for tlx and dlx&quot;
#cp -r /afs/bb/proj/fpga/framework/cards/$CRD/tlx ./hardware/oc-bip/
#cp -r /afs/bb/proj/fpga/framework/cards/$CRD/dlx ./hardware/oc-bip/


#==============================================================================================
# Setting up Vivado and Timing value

echo;echo &quot;****************************************************************************************&quot;
echo &quot;J: Setting up Vivado Version and timing value&quot;

echo &quot;#setup: XILINX_LOCAL_USER_DATA=${XILINX_LOCAL_USER_DATA}, overwrite=no to prevent write access error in XilincTclStore (tclapp:load_apps)&quot; &gt;&gt;snap_env.sh
echo &quot;export XILINX_LOCAL_USER_DATA=no&quot; &gt;&gt; snap_env.sh
echo &quot; --&gt; For all OPENCAPI cards we run Vivavo $VIVADO_CHOICE and extend Timing trials to 5 runs until we optimise placement...&quot;
echo &quot;     unless expressly indicated&quot;

cd ${OCACCEL_ROOT}
export VIV_VERSION=&quot;$VIVADO_CHOICE&quot;
echo &quot;VIVADO version initially set to $VIV_VERSION (please check if we change this later for some specific cards)&quot;

echo &quot;export TIMING_LABLIMIT=\&quot;${TIMING_LABLIMIT_CHOICE}\&quot;&quot; &gt;&gt; snap_env.sh
echo &quot;TIMING LIMIT set to ${TIMING_LABLIMIT_CHOICE}&quot;

echo;echo &quot;****************************************************************************************&quot; 
echo &quot;J: Vivado paths &amp; licences server setup ...&quot;
export XILINX_ROOT=/opt/Xilinx
#export XILINX_ROOT=/afs/bb/proj/fpga/xilinx
export XILINXD_LICENSE_FILE=2100@pokwinlic1.pok.ibm.com
source $XILINX_ROOT/Vivado/${VIV_VERSION}/settings64.sh

# No cadence setup at MOP
#echo;echo &quot;****************************************************************************************&quot; 
#echo &quot;J: Cadence SETUP ...&quot;
#echo &quot;IES_LIBS=$IES_LIBS&quot;
#echo &quot;CDS_LIC_FILE=$CDS_LIC_FILE&quot;


#==============================================================================================
# Testing POWER servers accessibility if ACT=test and TEST_ON_HW=true,
# else making $CRD.$ACT.defconfig 

echo;echo &quot;****************************************************************************************&quot;

case $ACT in          # select config &amp; compile action
  &quot;test&quot;)
    echo &quot;J: ACT=$ACT ==&gt; skiping image building&quot;;echo
    
  	if [ &quot;$TEST_ON_HW&quot; == &quot;true&quot; ]; then 

        echo &quot;Test on Hardware selected ==&gt; testing POWER servers accessibility:&quot;
        # Cleaning will occur at this step, remote fw*.bin* files older than $days will be removed
        days=90;srch=&quot;&apos;fw*.bin*&apos;&quot;
      
      for box in &quot;${TESTBOXES[@]}&quot;;do
        echo &quot;----------------------------------------------------&quot;
        if [[ ${mopBoxes[*]} =~ $box ]]
        then
          # $box is a Montpellier server
          echo -e &quot;MOP   : $box -&gt; \c&quot;
          RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
        else
          echo -e &quot;AUSTIN: $box -&gt; \c&quot;
          RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
        fi
      
        if [ $RC == &quot;0&quot; ]; then echo &quot;$box ping ok&quot;; else echo &quot;$box not reachable&quot;;continue;fi
        
        echo &quot;Cleaning process : ssh ${HWUser}@$box find &amp; delete $srch in /home/$HWUser older than $days days&quot;
        ssh ${HWUser}@$box &quot;find /home/$HWUser -type f -name $srch -mtime +$days -ls -delete&quot;
        nusers=`ssh ${HWUser}@${box} who|grep -v root|grep -v ${HWUser}|wc -l`
        echo &quot;`date` box=$box nusers=$nusers&quot;
      done
    fi                          
    exit 0                     
    ;;
    
  *&quot;nvme&quot;*|*&quot;NVME&quot;*)
    echo &quot;J: ACT=*NVME* ==&gt; SIMULATOR=nosim &amp; Configure image thanks to $CRD.$ACT.defconfig file ...&quot;;echo
    echo &quot;export SIMULATOR=nosim&quot; &gt;&gt; snap_env.sh
    make -s $CRD.$ACT.defconfig
    ;;
    
# In case we would like a FACTORY, we build it using hdl_example.NORAM to ease debug
  *&quot;hdl_example.NORAM&quot;*)
    echo &quot;J: ACT=*hdl_example.NORAM* ==&gt; Factory case ?? ...&quot;
    if [ &quot;$FACTORY&quot;  == &quot;true&quot; ];then
       echo &quot;J: FACTORY=true ==&gt; ENABLE_FACTORY=y &amp; Configure image thanks to $CRD.$ACT.defconfig file...&quot;;echo
       echo &quot;ENABLE_FACTORY=y&quot; &gt;&gt; ./defconfig/$CRD.$ACT.defconfig
       make -s $CRD.$ACT.defconfig
    else
       echo &quot;J: FACTORY=false ==&gt; Doing NOTHING...&quot;;echo
    fi
    ;;
    
  *)
    echo &quot;J: Generic case ==&gt; Just configure image thanks to $CRD.$ACT.defconfig file...&quot;;echo
    make -s $CRD.$ACT.defconfig
    ;;
esac


#==============================================================================================
# Building image (make image/ make cloud...)

if [ &quot;$CL&quot; == &quot;nCL&quot; ]
then

  maxloop=5;
  for loop in `seq 1 $maxloop`
  do  
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: `date` Build Non-Cloud Image (make image) for $CRD, Loop ${loop}/$maxloop&quot;
    #RC=0; bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make image&quot; &amp;&amp; break || RC=$?
	RC=0; make image &amp;&amp; break || RC=$?
  done

  if [ $RC -eq 0 ] &amp;&amp; [ $loop -eq 1 ]; then 
    echo &quot;OK : ${CRD}_${ACT}_image :-make image- : TIMING SUCCEEDED at the first try (loop=$loop)&quot;

  elif [ $RC -eq 0 ] &amp;&amp; [ $loop -gt 1 ]; then
    echo &quot;WARNING : ${CRD}_${ACT}_image :-make image- : TIMING SUCCEEDED after $loop loop(s)&quot;
    echo &quot;  -&gt; Sending an email to ${EmailDestinationList[*]}&quot;
    SendAnEmail -s &quot;WARNING : ${CRD}_${ACT}_image :-make image- : TIMING SUCCEEDED after $loop loop(s)&quot; -d &quot;${EmailDestinationList[*]}&quot;

  elif [ $RC -ne 0 ]; then
    echo &quot;ERROR : ${CRD}_${ACT}_image :-make image- : TIMING FAILED after $maxloop loop(s)&quot;
    echo &quot;  -&gt; Sending an email to ${EmailDestinationList[*]}&quot;    
    SendAnEmail -s &quot;ERROR : ${CRD}_${ACT}_image :-make image- : TIMING FAILED after $maxloop loop(s)&quot; -d &quot;${EmailDestinationList[*]}&quot;
    exit 1
  fi

else # case of Cloud Build
# FAB never for the moment but if needed, needs to adapt (BSUB, etc)
  mkdir -p ${OCACCEL_ROOT}/hardware/DCPs
  echo &quot;J: `date` Build Cloud Image ...&quot;
  echo &quot;export DCP_ROOT=${OCACCEL_ROOT}/hardware/DCPs/&quot;              &gt;&gt; snap_env.sh
  echo &quot;ENABLE_PRFLOW=y&quot;                                          &gt;&gt; .snap_config
  echo &quot;ENABLE_CLOUD_USER_FLOW=n&quot;                                 &gt;&gt; .snap_config
  echo &quot;ENABLE_CLOUD_BUILD_BITFILE=n&quot;                             &gt;&gt; .snap_config
  make -s oldconfig
  echo &quot;J: Build Static Region ...&quot;
  bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make cloud_base&quot; || exit
  echo &quot;J: Build Action Region ...&quot;
  bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make cloud_action&quot; || exit
  echo &quot;J: Merge Static and Action Region ...&quot;
  echo &quot;ENABLE_CLOUD_BUILD_BITFILE=y&quot;                             &gt;&gt; .snap_config
  make -s oldconfig
  bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make cloud_merge&quot; || exit
fi


#==============================================================================================
# Checking generated binaries

# when using a parallel flash we have only 1 binary file
# when using a SPI8 flash we have 2 binary files to deal with

echo;echo &quot;****************************************************************************************&quot;
echo &quot;J: `date` Checking generated $ACT binaries for $CRD...&quot;


#BINFILES contains binary name (In SPI : &quot;primary and secondary&quot; names)
BINFILES=`ls ${OCACCEL_ROOT}/hardware/build/Images/oc_[0-9]*.bin|grep -v FACTORY|head -n2`
BITFILES=`ls ${OCACCEL_ROOT}/hardware/build/Images/oc_[0-9]*.bit|grep -v FACTORY|head -n2`
    
  
if [ &quot;$BINFILES&quot; == &quot;&quot; ]; then echo &quot;  --&gt; cannot find binary files&quot;;exit 1
fi
 
for  f in $BINFILES
do                   
    size=`ls -al $f | awk &apos;{print $5}&apos;`
    echo &quot;binfile=$f size=$size&quot;
    (( size &lt; 100000 )) &amp;&amp; die 1 &quot;  --&gt; image $f is too small $size to burn&quot;
    # We assign IMAGE for log purpose, it eventually takes the name of secondary if SPI8
    IMAGE=&quot;/home/${HWUser}/images/${CRD}/${ACT}/&quot;`basename $f` 
done

# In FACTORY MODE : We save hdl_example and hls_helloworld bin for cards files for future .mcs generation
#case ${ACT}:$FACTORY in
#     hdl_example.NORAM:true ) 
#			FACTBINFILES=`ls -t ${OCACCEL_ROOT}/hardware/build/Images/oc_*[0-9]_FACTORY*.bin`  # take FACTORY bin files
          # Copy hdl_ex Factory files if any
#            if [ &quot;$FACTBINFILES&quot; == &quot;&quot; ] ; then echo &quot;Cannot find Factory binfile $FACTBINFILES although FACTORY REQUESTED !!&quot;;exit 1
#            fi
#            SaveDir=&quot;$RootSaveDir/${CRD}_OC_FACTORY_MCS&quot;
#            mkdir -p $SaveDir
#			echo &quot;J: FACTORY was requested : copy ${CRD} hdl_example.noram bin files to $SaveDir&quot;;cp -rp $FACTBINFILES $SaveDir;;
#	hls_helloworld:true )
#			echo &quot;J: FACTORY was requested : copy ${CRD} hls_helloworld    bin files to $SaveDir&quot;;cp -rp $BINFILES $SaveDir;;
#esac


#==============================================================================================
# Checking if we can test the generated binaries on POWER Hardware

case ${TEST_ON_HW} in

  true )
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: Checking if we can test the generated binaries on POWER Hardware (test_on_hw=${TEST_ON_HW} for card=${CRD})&quot;

    TestCardAvailable=0
    for i in ${LIST_TEST_CARDS[@]}
    do
      if [ &quot;$CRD&quot; == &quot;$i&quot; ];then TestCardAvailable=1;fi
    done

    if [ $TestCardAvailable -eq 0 ]
    then
      SaveDir=$RootSaveDir/${CRD}_oc_missing
      echo &quot;  -&gt; No test CARD $CRD available, copying $CRD bin-file(s) &amp; bit-file(s) images to $SaveDir&quot;
      mkdir -p $SaveDir
      cp -rp $BINFILES $SaveDir
      echo $BINFILES
      if [ &quot;BITFILES&quot; != &quot;&quot; ]; then cp -rp $BITFILES $SaveDir; echo $BITFILES; fi
      echo;echo &quot;  -&gt; Copying $CRD bin-file(s) to jtagx86:$SaveDir&quot;
      ssh ${HWUser}@jtagx86 &quot;mkdir -p $SaveDir&quot;
      scp -rp $BINFILES ${HWUser}@jtagx86:$SaveDir
      exit 0
    fi
  ;;
  
  false )
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: No test on POWER Hardware requested (test_on_hw=${TEST_ON_HW} for card=${CRD})&quot; 
    SaveDir=$RootSaveDir/no_test_required
    mkdir -p $SaveDir

    echo &quot;  -&gt; No test required, copying image to $SaveDir&quot;
    cp -rp $BINFILES $SaveDir
    echo $BINFILES
    if [ &quot;BITFILES&quot; != &quot;&quot; ]; then cp -rp $BITFILES $SaveDir; echo $BITFILES; fi
    echo;echo &quot;  -&gt; Copying $CRD image to jtagx86:$SaveDir&quot;
    ssh ${HWUser}@jtagx86 &quot;mkdir -p $SaveDir&quot;
    scp -rp $BINFILES ${HWUser}@jtagx86:$SaveDir
    exit 0
  ;;

esac


#==============================================================================================
# FAB: POWER hardware test is not yet ready, and below end of script is not yet ready too
# =&gt; Copying and exiting !

echo;echo &quot;****************************************************************************************&quot;
echo &quot;J: Testing the generated binaries on POWER Hardware (test_on_hw=${TEST_ON_HW} for card=${CRD})&quot;
SaveDir=$RootSaveDir/${CRD}_oc_for_test
echo &quot;  -&gt; Hardware test for CARD $CRD not yet working, copying $CRD bin-file(s) &amp; bit-file(s) images to $SaveDir&quot;
mkdir -p $SaveDir
cp -rp $BINFILES $SaveDir
echo $BINFILES
if [ &quot;BITFILES&quot; != &quot;&quot; ]; then cp -rp $BITFILES $SaveDir; echo $BITFILES; fi
echo;echo &quot;  -&gt; Copying $CRD bin-file(s) to jtagx86:$SaveDir&quot;
ssh ${HWUser}@jtagx86 &quot;mkdir -p $SaveDir&quot;
scp -rp $BINFILES ${HWUser}@jtagx86:$SaveDir

echo;echo &quot;J: HW TEST NOT YET READY TO WORK ! =&gt; Exiting !&quot;
exit 0

#==============================================================================================
#==============================================================================================
#==============================================================================================


#==============================================================================================
# Testing the generated binaries on POWER Hardware
# (if $TEST_ON_HW==true and $CRD into $LIST_TEST_CARDS[*])

# Set unique target directory such that parallel builds do not disturb each other.
# Well, we might to clean up those from time to time ...

TARGET_DIR=&quot;${JOB_NAME}-${BUILD_NUMBER}-${GIT_BRANCH}&quot;
export TARGET_DIR=`echo $TARGET_DIR | sed -e &apos;s/[=,\/]/-/g&apos;`
echo &quot;TARGET_DIR=${TARGET_DIR}&quot;
echo &quot;Current Dir is &quot; `pwd`
echo &quot;  -&gt; JOB_NAME:        ${JOB_NAME}&quot;
echo &quot;  -&gt; IMAGE:           ${IMAGE}&quot;
echo &quot;  -&gt; CARD_TO_TEST:    ${CRD}[$cardid]&quot;
echo &quot;  -&gt; ACTION:          ${ACT}&quot;
echo &quot;  -&gt; GIT_Branch:      ${GIT_BRANCH}&quot;
echo &quot;  -&gt; GIT_Commit:      ${GIT_COMMIT}&quot;

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Testing TestBoxes reachability&quot;
echo &quot;  -&gt; testboxes now = ${TESTBOXES[@]}&quot;

for box in &quot;${TESTBOXES[@]}&quot;;do
  echo &quot;----------------------------------------------------&quot;
  if [[ ${mopBoxes[*]} =~ $box ]]
  then
    # $box is a Montpellier server
    echo -e &quot;MOP   : $box -&gt; \c&quot;
    RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
  else
    # $box is an Austin server
    echo -e &quot;AUSTIN: $box -&gt; \c&quot;
    RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
  fi

if [ &quot;$RC&quot; == &quot;0&quot; ]; then : 
    echo &quot;$box ping ok&quot;;
  else
    for i in &quot;${TESTBOXES[@]}&quot;; do [[ $i != $box ]] &amp;&amp; new+=($i);done   # generate new test array without unreachable box
    unset TESTBOXES;TESTBOXES=(&quot;${new[@]}&quot;);unset new                   # reassign to original array name
    echo &quot;$box not reachable =&gt; removed from testing&quot;
    echo &quot;testboxes remaining = ${TESTBOXES[@]}&quot;
    if [[ &quot;${TESTBOXES[@]}&quot; == &quot;&quot; ]];then echo &quot;no test machines available anymore&quot;;exit 1;fi
  fi
done # for box

echo;echo &quot;----------------------------------------------------&quot;
echo &quot;testboxes now = ${TESTBOXES[@]}&quot;

function finish # define function to unlock in case of error, executed after registering with &quot;trap finish EXIT&quot;
  {
  echo &quot;RC=$?, now unlock ${LOCK} and end&quot;
  SSH_RC=0;ssh ${HWUser}@$box rmdir ${LOCK} || SSH_RC=$?
  echo &quot;`date` box=$box $LOCK unlock RC=$SSH_RC&quot;
  }


echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Searching (max $maxloop min) for free card=$CRD in ${TESTBOXES[@]}&quot;

maxloop=60

FindCardTool=&quot;oc-accel_find_card&quot;

for loop in `seq 1 $maxloop`;do

  echo;echo &quot;#################################################&quot;
  echo &quot;J: LOOP $loop/$maxloop&quot;

  for box in &quot;${TESTBOXES[@]}&quot;;do

    echo;echo &quot;-------------------------------------------------&quot;
    echo &quot;J: $box&quot;

    nusers=`ssh ${HWUser}@${box} who|grep -v root|grep -v ${HWUser}|wc -l`

    find_card=$FindCardTool.${GIT_COMMIT}.`date +%H%M%S`.`basename $BINFILES`

    echo  &quot;  --&gt; Copying $find_card to $box:/home/${HWUser}&quot;
    RC=0;scp ./software/tools/$FindCardTool ${HWUser}@$box:/home/${HWUser}/$find_card ; RC=$?
    if [ $RC -gt 0 ];then
      echo &quot;     -&gt; copy $find_card to $box FAILED, continuing anyway...&quot;;
    fi
    
    echo  &quot;  --&gt; Looking for OC-$CRD inside $box&quot;
    found=0;cards=`ssh -ttq ${HWUser}@${box} /home/${HWUser}/$find_card -A OC-${CRD}`||found=$?

    echo &quot;  --&gt; Removing $find_card from $box RC=$SSH_RC&quot;
    SSH_RC=0;ssh -ttq ${HWUser}@${box} rm /home/${HWUser}/$find_card || SSH_RC=$?
    if [ $SSH_RC -gt 0 ];then
      echo &quot;    -&gt; Delete $find_card to $box FAILED, continuing anyway...&quot;;
    fi

	echo;echo &quot;J: `date` loop=$loop box=$box nusers=$nusers card=$CRD $FindCardTool found=$found&quot;
    echo

    hours=`date +%H`

    case $found:$nusers in

      #------------------------------------
      # no card available =&gt; try other box
      0:*)
        if [ $box == ${TESTBOXES[*]:(-1)} ];then
          echo &quot;  --&gt; $box is the last system to test; Waiting for 60s...&quot;
          sleep 60 # Last box of the list TESBOXES =&gt; Waiting 60s and go to next loop
        fi
        continue # next box or next loop (if it was the last box of the list)
      ;;

      #------------------------------------
      # card available &amp; no user =&gt; now lock &amp; test
      [1234]:0)
		for cardid in $cards;do
      	  LOCK=&quot;jenkins_lock_card$cardid&quot;
		  RC=0;ssh ${HWUser}@$box &quot;mkdir ${LOCK} 2&gt;/dev/null&quot;||RC=$?
		  if [ $RC == &quot;0&quot; ]; then :
		    echo &quot;  --&gt; `date` box=$box $LOCK lock RC=$RC&quot;; 
		    trap finish EXIT  # register finish/unlock function, after lock is set
		    break 3 # found card and no user =&gt; going out of $box for-loop and $loop for-loop
	      else 
		    echo &quot;  --&gt; box=$box $LOCK already locked, try next card&quot;
		  fi    
		done
      ;;

      #------------------------------------
      # found something else than 1,2,3 or 4 cards =&gt; meaning BAD $found return code
      *:0)      
        echo &quot;  --&gt; unknown found_RC=$found from $FindCardTool=$cards. EXITING...&quot;
        exit 100
      ;;

      #------------------------------------
      # card available but user(s) connected...
      *)      
      	if (( 9&lt;=hours &amp;&amp; hours&lt;=19 ));then
          # It is day time =&gt; priority to interactive users
      	  echo &quot;  --&gt; hours=$hours (day), nusers=$nusers, try other box&quot;
          if [ $box == ${TESTBOXES[*]:(-1)} ];then
            echo &quot;  --&gt; $box is the last system to test; Waiting for 60s...&quot;
            sleep 60 # Last box of the list TESBOXES =&gt; Waiting 60s and go to next loop
          fi
          continue # next box or next loop (if it was the last box of the list)

        else
          # It is night =&gt; running on $box even if there are connected users
          ssh ${HWUser}@${box} who|grep -v root|grep -v ${HWUser}
      	  echo &quot;  --&gt; hours=$hours (night), nusers=$nusers, now lock &amp; notify &amp; test&quot;
		  for cardid in $cards;do
      	    LOCK=&quot;jenkins_lock_card$cardid&quot;
		    RC=0;ssh ${HWUser}@$box &quot;mkdir ${LOCK} 2&gt;/dev/null&quot;||RC=$?
		    if [ $RC == &quot;0&quot; ]; then :
	  	      echo &quot;  --&gt; `date` box=$box $LOCK lock RC=$RC&quot;; 
	   	      trap finish EXIT  # register finish/unlock function, after lock is set
              ssh ${HWUser}@$box wall &quot;WARNING: JENKINS OPENCAPI TEST STARTING NOW on FPGA CARD=$CRD ID=$cards&quot;
		      break 3 # found card and it is the night =&gt; going out of $box for-loop and $loop for-loop
			else 
			  echo &quot;  --&gt; box=$box $LOCK already locked, try next card&quot;
			fi    
          done
        fi
      ;;
      
    esac
    
  done # for box
  
done #for loop


if [ $loop -eq $maxloop ];then
  echo;echo &quot;***************************************************************************************&quot;
  echo &quot;J: J: No card $CRD available with TESTBOXES= ${TESTBOXES[*]}&quot;
  SaveDir=&quot;$RootSaveDir/${CRD}_oc_card_not_avail&quot;
  mkdir -p $SaveDir
  echo &quot;  -&gt; Copying image to $SaveDir&quot;
  cp -rp $BINFILES $SaveDir
  echo &quot;  -&gt; EXITING !&quot;
  exit 100
fi

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Testing $CRD card onto $box system&quot;

ssh ${HWUser}@${box} &quot;echo ------ START of JOB on $box ----&gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;date                                 &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo JOB_NAME  : $JOB_NAME           &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Card      : $CRD[$cardid]       &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Image     : $IMAGE              &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Build No  : ${BUILD_NUMBER}     &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Git Branch: ${GIT_BRANCH}       &gt;&gt; jenkins.log&quot;

trap finish EXIT  # register finish/unlock function, after lock is set


echo &quot;  -&gt; Preparing oc-accel workspace by cloning ${GIT_URL} into ${box}:${TARGET_DIR} using branch= ${GIT_BRANCH}&quot;
RC=0; ssh ${HWUser}@${box} &quot;git clone ${GIT_URL} ${TARGET_DIR};cd ${TARGET_DIR};git checkout ${GIT_BRANCH}&quot; || RC=$?

if [ $RC -ne 0 ];then 
	SaveDir=&quot;$RootSaveDir/gitclone_error&quot;
    echo &quot;  -&gt; git clone ${GIT_URL} ${TARGET_DIR} failed at ${box} =&gt; copying image to $SaveDir&quot;
	cp -rp $BINFILES $SaveDir
	echo &quot;  -&gt; EXITING !&quot;
	exit 100
fi

# FAB: J&apos;en suis là

echo &quot;  -&gt; Copying image(s) $BINFILES to $IMAGE on $box&quot;
ssh $box mkdir -p /home/${HWUser}/images/${CRD}/${ACT}    # create subdirectory, if not avail yet

COUNT_IMAGE=0                         # Modification to support SPI dual files cases
for f in $BINFILES
do
  IMAGE[$COUNT_IMAGE]=&quot;/home/${HWUser}/images/${CRD}/${ACT}/&quot;`basename $f`
  echo &quot;J: COPY Image $f to ${IMAGE[$COUNT_IMAGE]} on ${HWUser}@$box&quot;
  RC=0;rsync -tvh $f ${HWUser}@$box:${IMAGE[$COUNT_IMAGE]} ; RC=$?
  if [ &quot;$RC&quot; -gt &quot;0&quot; ];then 
    SaveDir=&quot;$RootSaveDir/rsync_error&quot;;echo &quot;rsync error, copy image to $SaveDir&quot;;
    cp -rp $f $SaveDir
    exit 100
  fi
  COUNT_IMAGE=`expr $COUNT_IMAGE + 1` # Modification to support SPI dual files cases
done


echo &quot;J: BIN Files Transfered to $box ...&quot;

echo &quot;***************************************************************************************&quot;
echo &quot;&quot;
# ssh fpga@${box} lsb_release -a

echo &quot;J: Preparing command ...&quot;
RUN=&quot;sudo ./actions/scripts/oc_snap_jenkins.sh&quot;  #sudo used to get access to /dev/ocxl/IBM,oc-snap.... directory
if [ ! -f $RUN ];then 
  echo &quot;J: `date` Shell Script $RUN not found,Exit UNSTABLE&quot;;
  exit 100
fi
RUN+=&quot; -D ${TARGET_DIR}&quot;

#AC adding SPI8 Variable
SPI8=0
case $CRD in
  &quot;AD9V3&quot;)  SPI8=1;;            
  *)        SPI8=0;;
esac   
#AC adding SPI8 Variable

echo &quot;J: Card=$CRD and SPI8=$SPI8&quot;
if [ $SPI8 -eq 0 ];then
#     Preparing Command to be run on $box :
     if [ -z ${IMAGE} ];then RUN+=&quot; -A ALL&quot;;else RUN+=&quot; -F ${IMAGE} -A ${CRD} -C $cardid&quot;;fi
else
#     Preparing Command to be run on $box :
     if [ -z ${IMAGE} ];then RUN+=&quot; -A ALL&quot;;else RUN+=&quot; -F ${IMAGE[0]} -f ${IMAGE[1]} -A ${CRD} -C $cardid&quot;;fi
fi   

echo &quot;***************************************************************************************&quot;
echo &quot;J: Build the software and actions on $box in $TARGET_DIR ...&quot;
RC=0;ssh $box make -C ${TARGET_DIR} clean software actions || exit 100
echo &quot;&quot;
echo &quot;J: Make finished on $box in $TARGET_DIR ...&quot;
echo &quot;***************************************************************************************&quot;
echo &quot;&quot;
echo &quot;J: `date` Executing this SNAP JENKINS TEST on $box from ${TARGET_DIR} directory:&quot;
echo &quot;J: =&gt;$RUN&quot;
RC=0;ssh -T ${HWUser}@${box} &lt;&lt; EOF || RC=$?
	export TERM=xterm
	cd ${TARGET_DIR}
    pwd
	set -f
    ${RUN}
EOF

# Write short log only, Clean workspace
# Note: this lines in the log file and the lines above can be 
ssh ${HWUser}@${box} &quot;echo Exit: $JOB_NAME RC = $RC at:\       &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;date                                     &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo ----------- EXIT -------------------&gt;&gt; jenkins.log&quot;

#DEBUG !!
#echo &quot;J: `date` Clean up ${TARGET_DIR} on ${box}&quot;
echo &quot;J: `date` DEBUG : DO NOT Clean up ${TARGET_DIR} on ${box}&quot;
#ssh -T ${HWUser}@${box} rm -rf ${TARGET_DIR}
  
if [ 0 -ne $RC ]; then
  echo &quot;J: `date` Test failed RC = $RC, exit UNSTABLE&quot;
  exit 100
fi </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.23">
      <recipients>fabrice_moyen@fr.ibm.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
        <timeoutSecondsString>14400</timeoutSecondsString>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.FailOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.1">
      <template>#${BUILD_NUMBER} ${GIT_BRANCH}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
    <touchStoneCombinationFilter>ACT==&quot;test&quot; &amp;&amp; CRD_CL==&quot;AD9V3_nCL&quot;</touchStoneCombinationFilter>
    <touchStoneResultCondition>
      <name>UNSTABLE</name>
      <ordinal>1</ordinal>
      <color>YELLOW</color>
      <completeBuild>true</completeBuild>
    </touchStoneResultCondition>
  </executionStrategy>
  <childCustomWorkspace>${BRANCH}/${COMBINATION}</childCustomWorkspace>
</matrix-project>