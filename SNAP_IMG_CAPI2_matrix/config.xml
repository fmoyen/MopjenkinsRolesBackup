<?xml version='1.1' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.14">
  <actions/>
  <description>Builds bitstreams with many different configurations and tests this images on real HW if possible.&#xd;
In case of problems: please contact alexandre.castellane@fr.ibm.com or fabrice_moyen@fr.ibm.com&#xd;
WARNING !!! &#xd;
=&gt;&gt; FX609, S241, U200 cards are not available for test =&gt; only binary generation are performed (no hw test)  &#xd;
=&gt;&gt; Minimum TIMING increased to 300ps for CAPI2&#xd;
==&gt; Orpington hosts AD9V3 (mainly used in OpenCAPI, the other one is now in Pavilly)&#xd;
==&gt; Lewen05 hosts 1 N250SP and 1 Mellanox INNOVA2 (no CAPI reset nor automated tests possible)&#xd;
==&gt; Pavilly hosts 1 AD9V3 main mode is C2&#xd;
&#xd;
2019.1 generates timings error =&gt; 2019.2 by default&#xd;
&#xd;
hdl_example.NORAM temporarily removed (generates junk on jenkins log)&#xd;
hls_parallel_memcpy removed (fails)&#xd;
&#xd;
2019/12/05: initial actions matrix&#xd;
-----------------------------------------------&#xd;
hdl_example.BRAM&#xd;
hdl_example.SDRAM&#xd;
hdl_example.SDRAM.NVME&#xd;
hdl_helloworld&#xd;
hdl_nvme_example.SDRAM.NVME&#xd;
hls_nvme_memcopy&#xd;
hls_memcopy&#xd;
hls_bfs&#xd;
hls_hashjoin&#xd;
hls_search&#xd;
hls_sponge&#xd;
hls_helloworld&#xd;
hls_decimal_mult&#xd;
hls_scatter_gather&#xd;
hls_latency_eval&#xd;
hls_vector_generator&#xd;
test</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.11"/>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
      <projectUrl>https://github.com/open-power/snap/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Choose the branch for https://github.com:open-power/snap you want to test. Please do not use wildcards!!</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CAPIUTILS_BRANCH</name>
          <description>Choose the branch for https://github.com/ibm-capi/capi-utils you want to test. Please do not use wildcards!!</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_GLOBAL</name>
          <description>Choose the Vivado version to use
This parameter overseedes all VIVADO_XXX parameters below
If -- then VIVADO_XXX parameters below are taken into account</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>--</string>
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
              <string>2019.2</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_AD9V3</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2019.2</string>
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_AD9H3</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2019.2</string>
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_N250SP</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
              <string>2019.2</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_FX609</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2019.2</string>
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_S241</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2019.2</string>
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VIVADO_U200</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2019.2</string>
              <string>2018.2</string>
              <string>2018.3</string>
              <string>2019.1</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.plugins.matrix__configuration__parameter.MatrixCombinationsParameterDefinition plugin="matrix-combinations-parameter@1.3.1">
          <name>MatrixFilter</name>
          <description></description>
          <shortcutList>
            <hudson.plugins.matrix__configuration__parameter.shortcut.ResultShortcut>
              <name>Successful</name>
              <exact>false</exact>
              <resultsToCheck>
                <string>SUCCESS</string>
              </resultsToCheck>
            </hudson.plugins.matrix__configuration__parameter.shortcut.ResultShortcut>
            <hudson.plugins.matrix__configuration__parameter.shortcut.ResultShortcut>
              <name>Failed</name>
              <exact>false</exact>
              <resultsToCheck>
                <string>FAILURE</string>
              </resultsToCheck>
            </hudson.plugins.matrix__configuration__parameter.shortcut.ResultShortcut>
            <hudson.plugins.matrix__configuration__parameter.shortcut.MatrixCombinationsShortcut_-All/>
            <hudson.plugins.matrix__configuration__parameter.shortcut.MatrixCombinationsShortcut_-None/>
          </shortcutList>
        </hudson.plugins.matrix__configuration__parameter.MatrixCombinationsParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TIMING_LABLIMIT_CHOICE</name>
          <description>Choose the TIMING_LABLIMIT parameter for building images. If achieved timing is worst than your choice, the run will failed.
Warning: -200ps is not easy to reach and needs several attempts (sometimes 5 attempts are not enough).</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>-300</string>
              <string>-200</string>
              <string>-1000</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>FACTORY</name>
          <description>To generate a FACTORY image with hdl_example.NORAM cases
     and to finally copy the hdl_example.NORAM factory &amp; hls_helloworld binaries into /data/Images/$card_FACTORY_MCS directory.
These binaries will be used to create a full MCS image including hld_example.NORAM factory image + hls_helloworld user image.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>TEST_ON_HW</name>
          <description>enable/disable testing on HW</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NO_TEST_CARDS</name>
          <description>The list of CAPI2.0 cards we do NOT want to HW test for different reasons (please see README for default reasons) </description>
          <defaultValue>FX609 S241 U200</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mopBoxes</name>
          <description>List of Montpellier systems available for testing :
  - orpington: AC922 8335-GTH with 1 OC-AD9V3
  - lewen05; AC922 with 1 N250SP and 1 Mellanox INNOVA2
  - pavilly: IC922 with 1 OC-AD9V3
(it needs to define capimop user with authorized_keys)</description>
          <defaultValue>orpington lewen05 pavilly</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>austinBoxes</name>
          <description>List of Austin systems available for testing :
(Assuming no VPN or jump server is needed to access Austin servers, 9.X.X.X addresses)
(it needs to define capimop user with authorized_keys)</description>
          <defaultValue>hawklp08.aus.stglabs.ibm.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>1</maxConcurrentPerNode>
      <maxConcurrentTotal>10</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
      <limitOneJobWithMatchingParams>true</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>false</throttleMatrixBuilds>
        <throttleMatrixConfigurations>true</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:open-power/snap.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>snap</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>true</recursiveSubmodules>
        <trackingSubmodules>false</trackingSubmodules>
        <reference></reference>
        <parentCredentials>false</parentCredentials>
        <shallow>false</shallow>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
    </extensions>
  </scm>
  <assignedNode>X86_UBUNTU</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.29.5">
      <spec></spec>
    </com.cloudbees.jenkins.GitHubPushTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 0-8/1 * * *
H 22-23/1 * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>ACT</name>
      <values>
        <string>hdl_example.NORAM</string>
        <string>hdl_example.BRAM</string>
        <string>hdl_example.SDRAM</string>
        <string>hdl_helloworld</string>
        <string>hls_memcopy</string>
        <string>hls_helloworld</string>
        <string>hls_decimal_mult</string>
        <string>hls_latency_eval</string>
        <string>test</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>CRD_CL</name>
      <values>
        <string>AD9V3_nCL</string>
        <string>AD9H3_nCL</string>
        <string>N250SP_nCL</string>
        <string>FX609_nCL</string>
        <string>S241_nCL</string>
        <string>U200_nCL</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>X86_UBUNTU</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <combinationFilter>(ACT==&quot;test&quot; &amp;&amp; CRD_CL==&quot;AD9V3_nCL&quot;) || ACT!=&quot;test&quot;</combinationFilter>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set +x

echo
echo &quot;****************************************************************************************&quot;
echo &quot;BUILD START (`date`)&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;EXECUTING CAPI2.0 IMG FIRST SHELL FROM MOPJENKINS ...&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;Hostname: `hostname`&quot;; echo &quot;ID: `id`&quot;
echo &quot;Working dir is : $PWD&quot;
echo


#==============================================================================================
# Variables

&gt; export_props.properties
NAME=$(echo $GIT_BRANCH| cut -d&apos;/&apos; -f 2 |tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;) # remove origin/ from branch and translate to lowercase
PREFIX=$(echo $NAME| cut -d&apos;_&apos; -f 1)    # chars up to first &apos;_&apos; identify need for test
ACTION_TYPE=$(echo $ACT| cut -d&apos;_&apos; -f 1| tr &apos;[:lower:]&apos; &apos;[:upper:]&apos;)
CRD=$(echo $CRD_CL| cut -d&apos;_&apos; -f 1)    # chars up to  first &apos;_&apos; identify card
CL=$(echo $CRD_CL| cut -d&apos;_&apos; -f 2)     # chars behind first &apos;_&apos; identify Cloud build


echo &quot;Build with Card=$CRD Action=$ACT Action_type=$ACTION_TYPE CLOUD_build=$CL branch_selected=$BRANCH git_branch=$NAME prefix=$PREFIX test_on_hw=$TEST_ON_HW&quot;

EmailDestinationList=( fabrice_moyen@fr.ibm.com )
EmailOrNotEmail=0 # 0 means do not send emails; 1 means send email

HWUser=&quot;capimop&quot;


#==============================================================================================
# Functions

# Function for sending alerting emails
# Example 1: SendAnEmail -s &quot;This is the subject/alert&quot; -d firstDest@gmail.com -d SecondDest@free.fr
# Example 2: SendAnEmail -s &quot;This is the subject/alert&quot; -d &quot;${EmailDestinationList[*]}&quot;
function SendAnEmail
{
  local OPTIND opt DestList
  while getopts &quot;s:d:&quot; opt
  do 
    case $opt in
      s)
        Subject=&quot;$OPTARG&quot;
      ;;
      d)
        DestList+=(&quot;$OPTARG&quot;)
      ;;
    esac
  done
  
  for i in ${DestList[@]}
  do
    echo &quot;&quot; | mail -s &quot;$Subject&quot; $i
  done
}


#==============================================================================================
# Do not run non-desired cases (action types, actions, cards)
# This will lead to a brown colored result meaning : aborted

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Do not run (abort) non-desired cases (action types, actions, cards)&quot;

# BSKIP stands for board skip

BSKIP=0

&lt;&lt; //// # FAB Matrix Combination Filter Implementation
if [ &quot;${!ACTION_TYPE}&quot; == &quot;false&quot; ]; then BSKIP=1; fi # if ACTION_TYPE=&quot;HLS&quot;, ${!ACTION_TYPE} is identical to $HLS
if [ &quot;${!CRD}&quot;         == &quot;false&quot; ]; then BSKIP=1; fi # if CRD=&quot;AD9V3&quot;, ${!CRD} is identical to $AD9V3
if [ &quot;$ACT&quot;            == &quot;test&quot;  ]; then BSKIP=0; fi # test action always run
////


echo &quot;  -&gt; action_types (hdl,hls)=$ACTION_TYPE enabled_cards=$CRD BSKIP=$BSKIP&quot;

# ASKIP stands for ACTION skip

# FAB: faire le tri dans ces cases
case &quot;$CRD:$ACT&quot; in
    
 # AD9H3:hdl_example.SDRAM* | AD9H3:hls_memcopy | AD9H3:hls_search ) # AD9H3 has no SDRAM
 # AC 20200215 introduced memcopy ready to test HBM !
    AD9H3:hdl_example.SDRAM* | AD9H3:hls_search ) # AD9H3 has no SDRAM
    C=&quot;hnsd&quot;
    ASKIP=1
    ;; 
        
  AD9H3:hls_bfs | AD9H3:hls_hashjoin | AD9H3:hls_sponge | AD9H3:hls_scatter_gather | AD9H3:hls_vector_generator ) # AD9H3 has no defconfig
    C=&quot;hndf&quot;
    ASKIP=1
    ;; 
    
  N250SP:*NVME* | N250SP:*nvme* ) # disabled, as Nvme not yet available
    C=&quot;SPNV&quot;
    ASKIP=1
    ;;
    
  *:hls_intersect_h )
    C=&quot;inth&quot;
    ASKIP=1
    ;;
    
  *:hls_intersect_s )
    C=&quot;ints&quot;
    ASKIP=1
    ;;
    
  *:hls_blowfish ) # no maintenance for blowfish
    C=&quot;blow&quot;
    ASKIP=1
    ;;
    
  *:hls_parallel_memcpy)
    if [[ $CRD != &quot;AD9V3&quot; &amp;&amp; $CRD != &quot;N250SP&quot; ]]; then
      C=&quot;pmcp&quot;
      ASKIP=1
    fi
    ;;
    
  *:hls_vector_generator)
    if [[ $CRD != &quot;AD9V3&quot; &amp;&amp; $CRD != &quot;N250SP&quot; ]]; then
      C=&quot;vgen&quot;
      ASKIP=1
    fi
    ;;
    
  * )
    C=&quot;def &quot;
    ASKIP=0
    ;;

esac  

echo &quot;  -&gt; card=$CRD action=$ACT case=$C ASKIP=$ASKIP&quot;


#==============================================================================================
# Cleaning directories if ACT=test,
# else checking $CRD.$ACT.defconfig file existence

echo;echo &quot;*******************************************************************************&quot;

if [ $ASKIP -eq 0 ]
then 

 case &quot;$ACT&quot; in
 
  test )
    echo &quot;J: ACT=test&quot;
    gitnames=`git ls-remote https://github.com/open-power/snap|grep &quot;refs/heads/&quot;|awk &apos;{print $2}&apos;`
    echo &quot;gitnames=$gitnames&quot;
    
    echo
    for dir in &quot;/var/jenkins/workspace/SNAP_IMG_CAPI2_matrix&quot;/*;do
      if [ -d &quot;$dir&quot; ];then
        branch=&quot;refs/heads/&quot;`basename $dir`
        if [[ &quot;$gitnames&quot; =~ &quot;$branch&quot; ]];then echo &quot;branch=$branch found in gitnames, keeping dir=$dir&quot;
        else 
          echo &quot;branch=$branch not found in gitnames, deleting dir=\&apos;$dir\&apos;&quot;
          rm -rf &quot;$dir&quot;     # put in quotes to work for directories with blanks
        fi        
      else echo &quot;$dir is not a directory, continuing&quot;
      fi
    done
    DSKIP=0
    ;;
    
  *&quot;hls_intersect&quot;* )    
    echo &quot;J: ACT=$ACT =&gt; Checking snap/defconfig/$CRD.hls_intersect.defconfig existence&quot;
    if [ -f snap/defconfig/$CRD.hls_intersect.defconfig ];then
      echo &quot; --&gt; OK&quot;
      DSKIP=0
    else
      echo;echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
      echo &quot;$CRD.hls_intersect.defconfig does not exist&quot;
      echo &quot;Aborting...&quot;
      echo;echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
      echo;echo &quot;defconfig directory content:&quot;
      echo &quot;----------------------------&quot;
      ls snap/defconfig/
      DSKIP=1
    fi
    ;;

  * )    
    echo &quot;J: Checking snap/defconfig/$CRD.$ACT.defconfig existence&quot;
    if [ -f snap/defconfig/$CRD.$ACT.defconfig ];then
      echo &quot; --&gt; OK&quot;
      DSKIP=0
    else 
      echo;echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
      echo &quot;$CRD.$ACT.defconfig does not exist&quot;
      echo &quot;Aborting...&quot;
      echo;echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
      echo;echo &quot;defconfig directory content:&quot;
      echo &quot;----------------------------&quot;
      ls snap/defconfig/
      DSKIP=1
    fi
    ;;
    
esac

echo;echo &quot;defconfig DSKIP=$DSKIP&quot;


#==============================================================================================
# Checking enough space is available

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Checking enough space is available&quot;
echo
#AFSused=`fs lq /afs/bb/proj/fpga/framework/CI_ws/SNAP_IMG_TEST_matrix/|grep -v Used|awk &apos;{print $4}&apos;|sed &apos;s/%//g&apos;|sed &apos;s/&lt;//g&apos;`
diskused=`df -h /var/jenkins/workspace/SNAP_IMG_CAPI2_matrix|grep -v Used|awk &apos;{print $5}&apos;|sed &apos;s/%//g&apos;|sed &apos;s/&lt;//g&apos;`
SSKIP=0;msg=&quot;disk usage =${diskused}%&quot;

if   (( diskused &gt; 90 ));then 
  msg=&quot;ERROR: $msg, stopping additional builds&quot;;SSKIP=1
  if [ $EmailOrNotEmail -eq 1 ]; then
    SendAnEmail -s &quot;ERROR: Disk space is used up to ${diskused}%, stopping additional builds&quot; -d &quot;${EmailDestinationList[*]}&quot;
    #SendAnEmail -s &quot;ERROR: AFS space is used up to ${AFSused}%, stopping additional builds&quot; -d &quot;${EmailDestinationList[*]}&quot;  
  fi

elif (( diskused &gt; 70 ));then
   msg=&quot;WARNING: $msg&quot;
   if [ $EmailOrNotEmail -eq 1 ]; then
     SendAnEmail -s &quot;WARNING: Disk space is used up to ${diskused}%&quot; -d &quot;${EmailDestinationList[*]}&quot;
     #SendAnEmail -s &quot;WARNING: AFS space is used up to ${AFSused}%&quot; -d &quot;${EmailDestinationList[*]}&quot;  
   fi

else
   msg=&quot;OK: $msg&quot;
fi
echo &quot;$msg&quot;

fi # end of if ASKIP


#==============================================================================================
# Aborting if something went wrong

if [ &quot;$ASKIP&quot; == &quot;1&quot; ] || [ &quot;$DSKIP&quot; == &quot;1&quot; ] || [ &quot;$BSKIP&quot; == &quot;1&quot; ] || [ &quot;$SSKIP&quot; == &quot;1&quot; ];then SKIP=1;else SKIP=0;fi


#==============================================================================================
# Passing parameters to next script

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Forwarding parameters to next script&quot;
echo
echo &quot;SKIP=$SKIP&quot; &gt; export_props.properties
echo &quot;CRD=$CRD&quot; &gt;&gt; export_props.properties
echo &quot;CL=$CL&quot; &gt;&gt; export_props.properties
echo &quot;EmailDestinationList=( ${EmailDestinationList[*]} )&quot; &gt;&gt; export_props.properties
echo &quot;EmailOrNotEmail=$EmailOrNotEmail&quot; &gt;&gt; export_props.properties
echo &quot;HWUser=${HWUser}&quot; &gt;&gt; export_props.properties

echo &quot;properties forwarded to next shell:&quot;
cat export_props.properties
echo;echo &quot;*******************************************************************************&quot;
echo</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>export_props.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.2">
        <token>$SKIP</token>
      </condition>
      <buildStep class="org.jenkins_ci.plugins.fail_the_build.FixResultBuilder" plugin="fail-the-build-plugin@1.0">
        <defaultResultName>ABORTED</defaultResultName>
        <success></success>
        <unstable></unstable>
        <failure></failure>
        <aborted></aborted>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Advanced Execute shell option:
#  	Exit code to set build unstable =100

set +x                            # reduce Jenkins output
ulimit -c unlimited               # limit core dumps

echo;echo &quot;****************************************************************************************&quot;
echo &quot;EXECUTING SECOND CAPI2 SHELL FROM MOPJENKINS ...&quot;
echo &quot;****************************************************************************************&quot;

echo &quot;Building with Card=$CRD Action=$ACT CLOUD=$CL&quot;


#==============================================================================================
# Variables

export PATH=$PATH:/usr/local/bin  # python3 needs this path setup
export USERHOME=`pwd`
export SNAP_ROOT=$USERHOME/snap

TESTBOXES=( ${mopBoxes[*]} ${austinBoxes[*]} ) # init array of systems
echo &quot;testboxes now = ${TESTBOXES[@]}&quot;

# Set unique target directory such that parallel builds do not disturb each other.
# Well, we might to clean up those from time to time ...
TARGET_DIR=&quot;${JOB_NAME}-${BUILD_NUMBER}-${GIT_BRANCH}&quot;
export TARGET_DIR=`echo $TARGET_DIR | sed -e &apos;s/[=,\/]/-/g&apos;`

RootSaveDir=/data/Images
SaveDir=${RootSaveDir}/${CRD}/${CRD}_IMAGES
RootLogsDir=/data/LogsWhenFailed
LogsDir=$RootLogsDir/$TARGET_DIR/hardware
PSLSE_BRANCH=master
#PSL9File=/opt/IBM/PSL9/v2.00/ibm.com_CAPI_PSL9_WRAP_2.00.zip # v2.00: original ibm zip file
PSL9File=/opt/IBM/PSL9/v2.01/ibm.com_CAPI_PSL9_WRAP_2.01.zip # v2.01: Added virtexuplushbm supportedFamilies
CapiUtilsURL=&quot;https://github.com/ibm-capi/capi-utils.git&quot;

# FAB: prb pour passer la liste entre script1 et script2
# SendAnEmail échoue car il essaye d&apos;envoyer à ( et à )
unset EmailDestinationList; EmailDestinationList=( fabrice_moyen@fr.ibm.com )
SudoOrNotSudo=&quot;sudo&quot; # =&quot;sudo&quot; or &quot;&quot; if sudo not needed to access /dev/cxl

IMGServers=&quot;jtagx86&quot; # List of servers where to push generated images.

#echo;echo &quot;****************************************************************************************&quot;
#echo &quot;J:LSF SETUP ...&quot;

## previous settings :
# export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/bin
# export LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/etc
# export LSF_LIBDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/lib
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/lib
# export LSF_BINDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/bin
# export LSF_SUBMITTER_OSTYPE=Linux
# export LSF_ENVDIR=/home/lsfbb/prod/conf

## Rolf recommendations :
## LSF_BINDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
## LSF_ENVDIR=/home/lsfbb/prod/conf
## LSF_LIBDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
## LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/etc
## LSF_SUBMITTER_OSTYPE=Linux

## tested settings :
## export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
## export LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/etc
## export LSF_LIBDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
## export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
## export LSF_BINDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
## export LSF_SUBMITTER_OSTYPE=Linux
## export LSF_ENVDIR=/home/lsfbb/prod/conf

#LSF=&quot;-P zsort&quot;
#LSF+=&quot; -M 6&quot;                      # 12GB memory
#LSF+=&quot; -C 2000&quot;                   # 2MB core file

## AC 2019 10 08 : forcing RH7 for Vivado 2019.1
## LSF+=&apos; -R osver=rh7&apos;
## LSF+=&apos; -R type==X86_64&apos;
## LSF+=&apos; -R span[hosts=1]&apos;

## AC : older configuration
#LSF+=&apos; -R type=X86_64 -R span[hosts=1]&apos;
#LSF+=&quot; -I -n 8&quot;
#echo &quot;LSF variable set to : $LSF&quot;


#==============================================================================================
# Functions

# Function for sending alerting emails
# Example 1: SendAnEmail -s &quot;This is the subject/alert&quot; -d firstDest@gmail.com -d SecondDest@free.fr
# Example 2: SendAnEmail -s &quot;This is the subject/alert&quot; -d &quot;${EmailDestinationList[*]}&quot;

function SendAnEmail
{
  local OPTIND opt DestList
  while getopts &quot;s:d:&quot; opt
  do 
    case $opt in
      s)
        Subject=&quot;$OPTARG&quot;
      ;;
      d)
        DestList+=(&quot;$OPTARG&quot;)
      ;;
    esac
  done
  
  for i in ${DestList[@]}
  do
    echo &quot;&quot; | mail -s &quot;$Subject&quot; $i
  done
}

# Function to copy BIN, BIT, MCS, PRM, etc to the right directory
# Example 1: CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s jtagx86 -u $HWUser
# Example 2: CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -s jtagx86 -u $HWUser
# Example 3: CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;jtagx86 orpington&quot; -u $HWUser
# Example 4: CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
# -f should use &quot;&quot; as $SRCFILES are usually lists of files like &quot;primary.bin secondary.bin&quot;

function CopyToDir
{
  local OPTIND opt FPGACard SrcFiles ToDir LkDir SSHDest SSHUser

  while getopts &quot;c:f:d:l:s:u:&quot; opt
  do
      case $opt in
      c)
        FPGACard=&quot;$OPTARG&quot;
      ;;
      f)
        SrcFiles=&quot;$OPTARG&quot;
      ;;
      d)
        ToDir=&quot;$OPTARG&quot;
      ;;
      l)
        LkDir=&quot;$OPTARG&quot;
      ;;
      s)
        SSHDest=&quot;$OPTARG&quot;
      ;;
      u)
        SSHUser=&quot;$OPTARG&quot;
      ;;
    esac
  done

  ToDirFiles=&quot;&quot;
  for i in $SrcFiles; do ToDirFiles=&quot;$ToDirFiles $ToDir/`basename $i`&quot;; done


  # Copying Files to $ToDir
  echo &quot;  -&gt; Copying $FPGACard images (.bin, .bit, .mcs, .prm) to $ToDir&quot;
  mkdir -p $ToDir
  chmod g+w $ToDir
  cp -rp $SrcFiles $ToDir
      
  for dest in $SSHDest
  do
    echo;echo &quot;  -&gt; Copying $FPGACard images to $dest:$ToDir&quot;
    ssh ${SSHUser}@$dest &quot;mkdir -p $ToDir; chmod g+w $ToDir&quot;
    scp -rp $SrcFiles ${SSHUser}@$dest:$ToDir
  done

  # Building symbolic links into $LkDir
  if [ &quot;$LkDir&quot; != &quot;&quot; ]; then
    echo &quot;  -&gt; Building $FPGACard images links into $LkDir&quot;
    mkdir -p $LkDir
    chmod g+w $LkDir
    ln -s $ToDirFiles $LkDir

    for i in $ToDirFiles; do echo -e &quot;/\c&quot;;ls -la $LkDir/`basename $i` | cut -d &quot;/&quot; -f2-; done

    for dest in $SSHDest
    do
      echo;echo &quot;  -&gt; Building $FPGACard images links into $dest:$LkDir&quot;
      ssh ${SSHUser}@$dest &quot;mkdir -p $LkDir; chmod g+w $LkDir&quot;
      ssh ${SSHUser}@$dest &quot;ln -s $ToDirFiles $LkDir&quot;
      for i in $ToDirFiles; do ssh ${SSHUser}@$dest &quot;echo -e &apos;/\c&apos;;ls -la $LkDir/`basename $i` | cut -d &apos;/&apos; -f2-&quot;; done
    done
  fi
}


#==============================================================================================
# Power Service Layer Simulation Engine (pslse) setup
# Should not be used but may be required by ??

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J:Getting Power Service Layer Simulation Engine (pslse) Environment ...&quot;
echo
echo;echo &quot;Current directory is : $PWD&quot;
ls -al

echo;echo &quot;  -&gt; Deleting old ./pslse (Power Service Layer Simulation Engine) directory&quot;
rm -rf pslse

echo;echo &quot;Getting (git clone) Power Service Layer Simulation Environment (pslse) branch=$PSLSE_BRANCH for card=$CRD...&quot;
git clone -b $PSLSE_BRANCH https://github.com/ibm-capi/pslse pslse;echo &quot;git clone PSLSE RC=$?&quot;

cd ${SNAP_ROOT}
echo;echo &quot;  -&gt; Exporting pslse directory as : ${USERHOME}/pslse into snap_env.sh&quot;
echo &quot;export PSLSE_ROOT=$USERHOME/pslse&quot; &gt;snap_env.sh

echo;echo &quot;  -&gt; Exporting XILINX_LOCAL_USER_DATA=no into snap_env.sh&quot;
#echo &quot;export PSL_DCP=/afs/bb/proj/fpga/framework/cards/$CRD/current/b_route_design.dcp&quot; &gt;&gt;snap_env.sh
echo &quot;#setup: XILINX_LOCAL_USER_DATA=${XILINX_LOCAL_USER_DATA}, overwrite=no to prevent write access error in XilincTclStore (tclapp:load_apps)&quot; &gt;&gt;snap_env.sh
echo &quot;export XILINX_LOCAL_USER_DATA=no&quot; &gt;&gt; snap_env.sh
echo


#==============================================================================================
# Setting up Vivado, PSL9 and Timing value

echo;echo &quot;****************************************************************************************&quot;
echo &quot;J: Setting up Vivado Version, PSL9_IP_CORE (Zip file) for CAPI2.0 cards and timing value&quot;
echo
echo &quot; --&gt; For all CAPI2 cards we run Vivado $VIVADO_CHOICE and extend Timing trials to 5 runs until we optimise placement...&quot;
echo &quot;     unless expressly indicated&quot;

cd ${SNAP_ROOT}
export VIV_VERSION=&quot;$VIVADO_CHOICE&quot;
echo &quot;  -&gt; VIVADO version initially set to $VIV_VERSION (please check if we change this later for some specific cards)&quot;

echo &quot;export TIMING_LABLIMIT=\&quot;${TIMING_LABLIMIT_CHOICE}\&quot;&quot; &gt;&gt; snap_env.sh
echo &quot;  -&gt; TIMING LIMIT set to ${TIMING_LABLIMIT_CHOICE} into snap_env.sh&quot;

#echo &quot;export PSL9_IP_CORE=/afs/bb/proj/fpga/framework/cards/$CRD/ibm.com_CAPI_PSL9_WRAP_2.00.zip&quot; &gt;&gt;snap_env.sh
echo &quot;export PSL9_IP_CORE=$PSL9File&quot; &gt;&gt;snap_env.sh
echo &quot;  -&gt; PSL9_IP_CORE set to ${PSL9File} into snap_env.sh&quot;

# FAB: unneeded as jenkins configured to get submodules. To be checked
#echo &quot;J:git cloning capi2-bsp submodule&quot;
#git submodule update --init --recursive hardware/capi2-bsp


# RCXVUP with Eng sample can run only with 2017.4 !
# U200 runs only with 2018.3 or later
case $CRD in 
  &apos;RCXVUP&apos;) #echo &quot;export PSL9_IP_CORE=/afs/bb/proj/fpga/framework/cards/$CRD/ibm.com_CAPI_PSL9_WRAP_2.00.zip&quot; &gt;&gt;snap_env.sh
            #git submodule update --init --recursive hardware/capi2-bsp
            #cd ${SNAP_ROOT}
            export VIV_VERSION=&quot;2017.4&quot;
            #echo &quot;export TIMING_LABLIMIT=\&quot;-300\&quot;&quot; &gt;&gt; snap_env.sh
            ;;
#  &apos;U200&apos;)   export VIV_VERSION=&quot;2018.3&quot;  removed or 2019.1 test
#            ;;  
#  &apos;N250SP&apos;) #echo &quot;export PSL9_IP_CORE=/afs/bb/proj/fpga/framework/cards/$CRD/ibm.com_CAPI_PSL9_WRAP_2.00.zip&quot; &gt;&gt;snap_env.sh
            #git submodule update --init --recursive hardware/capi2-bsp
            #cd ${SNAP_ROOT}
#            export VIV_VERSION=&quot;2018.2&quot;
            #echo &quot;export TIMING_LABLIMIT=\&quot;-300\&quot;&quot; &gt;&gt; snap_env.sh
#            ;;
esac

echo;echo &quot;****************************************************************************************&quot; 
echo &quot;J: Vivado paths &amp; licences server setup ...&quot;
export XILINX_ROOT=/opt/Xilinx
#export XILINX_ROOT=/afs/bb/proj/fpga/xilinx
export XILINXD_LICENSE_FILE=2100@pokwinlic1.pok.ibm.com
source $XILINX_ROOT/Vivado/${VIV_VERSION}/settings64.sh


#==============================================================================================
# Cadence setup

# FAB: No cadence setup at MOP
#echo;echo &quot;****************************************************************************************&quot; 
#echo &quot;J: Cadence SETUP ...&quot;
#echo
#echo &quot;IES_LIBS=$IES_LIBS&quot;
#echo &quot;CDS_LIC_FILE=$CDS_LIC_FILE&quot;


#==============================================================================================
# Testing POWER servers accessibility if ACT=test and TEST_ON_HW=true,
# else making $CRD.$ACT.defconfig 

echo;echo &quot;****************************************************************************************&quot;

case $ACT in          # select config &amp; compile action

  &quot;test&quot;)
    echo &quot;J: ACT=$ACT ==&gt; skiping image building&quot;;echo
    
  	if [ &quot;$TEST_ON_HW&quot; == &quot;true&quot; ]; then 
    
      echo &quot;Test on Hardware selected ==&gt; testing POWER servers accessibility:&quot;
      # Cleaning will occur at this step, remote fw*.bin* files older than $days will be removed
      days=90;srch=&quot;&apos;fw*.bin*&apos;&quot;

      for box in &quot;${TESTBOXES[@]}&quot;;do
      
        if [[ ${mopBoxes[*]} =~ $box ]]
        then
          # $box is a Montpellier server
          echo -e &quot;MOP   : $box -&gt; \c&quot;
          RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
        else
          echo -e &quot;AUSTIN: $box -&gt; \c&quot;
          RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
        fi

        if [ $RC == &quot;0&quot; ]; then echo &quot;OK&quot;; else echo &quot;FAILED&quot;;continue;fi
                
        echo &quot;Cleaning process : ssh ${HWUser}@$box find &amp; delete $srch in /home/$HWUser older than $days days&quot;
        ssh ${HWUser}@$box &quot;find /home/$HWUser -type f -name $srch -mtime +$days -ls -delete&quot;
        nusers=`ssh ${HWUser}@${box} who|grep -v root|grep -v ${HWUser}|wc -l`
        echo &quot;box=$box nusers=$nusers (`date`)&quot;                
      done
    fi                          
    exit 0                     
    ;;
    
  *&quot;nvme&quot;*|*&quot;NVME&quot;*)
    echo &quot;J: ACT=*NVME* ==&gt; SIMULATOR=nosim &amp; Configuring image thanks to $CRD.$ACT.defconfig file ...&quot;;echo
    echo &quot;export SIMULATOR=nosim&quot; &gt;&gt; snap_env.sh
    make -s $CRD.$ACT.defconfig
    ;;
    
# In case we would like a FACTORY, we build it using hdl_example.NORAM to ease debug
  *&quot;hdl_example.NORAM&quot;*)
    echo &quot;J: ACT=$ACT ==&gt; First configuring image thanks to $CRD.$ACT.defconfig file ...&quot;
    make -s $CRD.$ACT.defconfig
    echo
    if [ &quot;$FACTORY&quot;  == &quot;true&quot; ];then
        echo &quot;  -&gt; Factory requested:&quot;
        echo &quot;       -&gt; Modifying just generated .snap_config file with ENABLE_FACTORY=y (which implies FACTORY_IMAGE=\&quot;TRUE\&quot;) ...&quot;
        cat .snap_config | egrep  -v &quot;ENABLE_FACTORY|FACTORY_IMAGE&quot; &gt; tempofile
        echo &apos;ENABLE_FACTORY=y&apos; &gt;&gt; tempofile
		mv tempofile .snap_config
        echo &quot;       -&gt; Running make oldconfig to re-generate clean .snap_config/.snap_config.sh files with ENABLE_FACTORY/FACTORY_IMAGE parameters ...&quot;; echo
        make -s oldconfig
    else
        echo &quot;  -&gt; Factory NOT requested: Nothing else to do (defconfig is the reference) ...&quot;;echo
    fi
    ;;
    
  *)
    echo &quot;J: Generic case ==&gt; Just configuring image thanks to $CRD.$ACT.defconfig file...&quot;;echo
    make -s $CRD.$ACT.defconfig
    ;;
    
esac


#==============================================================================================
# Building image (make image/ make cloud...)

if [ &quot;$CL&quot; == &quot;nCL&quot; ]
then

  maxloop=5;
  for loop in `seq 1 $maxloop`
  do  
  
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: Build Non-Cloud Image (make image) for $CRD, Loop ${loop}/$maxloop (`date`)&quot;
   
    echo;echo &quot;  -&gt; Cleaning (make clean) $SNAP_ROOT &amp; $SNAP_ROOT/hardware/capi2-bsp directories&quot;
    cd ${SNAP_ROOT}
    make clean                   # to make sure we restart from a blank snap
    cd hardware/capi2-bsp
    make clean                   # to make sure we restart from a blank capi-bsp    
    
    echo;echo &quot;  -&gt; Building the Image (make image)&quot;    
    #RC=0; bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make image&quot; &amp;&amp; break || RC=$?
    cd ${SNAP_ROOT}
    RC=0; make image &amp;&amp; break || RC=$?
    
  done
  
  if [ $RC -eq 0 ] &amp;&amp; [ $loop -eq 1 ]; then 
    echo &quot;OK : ${CRD}_${ACT}_image :-make image- : TIMING SUCCEEDED at the first try (loop=$loop)&quot;

  elif [ $RC -eq 0 ] &amp;&amp; [ $loop -gt 1 ]; then
    echo &quot;WARNING : ${CRD}_${ACT}_image :-make image- : TIMING SUCCEEDED after $loop loop(s)&quot;
    if [ $EmailOrNotEmail -eq 1 ]; then
      echo &quot;  -&gt; Sending an email to ${EmailDestinationList[*]}&quot;
      SendAnEmail -s &quot;WARNING : ${CRD}_${ACT}_image :-make image- : TIMING SUCCEEDED after $loop loop(s)&quot; -d &quot;${EmailDestinationList[*]}&quot;
    fi

  elif [ $RC -ne 0 ]; then
    echo &quot;ERROR : ${CRD}_${ACT}_image :-make image- : TIMING FAILED after $maxloop loop(s)&quot;
    if [ $EmailOrNotEmail -eq 1 ]; then
      echo &quot;  -&gt; Sending an email to ${EmailDestinationList[*]}&quot;    
      SendAnEmail -s &quot;ERROR : ${CRD}_${ACT}_image :-make image- : TIMING FAILED after $maxloop loop(s)&quot; -d &quot;${EmailDestinationList[*]}&quot;
    fi
    echo &quot;  -&gt; Backuping Build logs into $LogsDir&quot;
    mkdir -p $LogsDir/logs # rsync does not do &quot;mkdir -p $LogsDir/logs&quot; but &quot;mkdir $LogsDir/logs&quot; only (which will fail if more than one step dir to create)
    RSYNC_CMD=&quot;rsync -av $SNAP_ROOT/hardware/logs/* $LogsDir/logs&quot;
    echo; echo &quot;$RSYNC_CMD&quot;
    $RSYNC_CMD 2&gt;/dev/null
    mkdir -p $LogsDir/build/Reports
    RSYNC_CMD=&quot;rsync -av $SNAP_ROOT/hardware/build/Reports/* $LogsDir/build/Reports&quot;
    echo; echo &quot;$RSYNC_CMD&quot;
    $RSYNC_CMD 2&gt;/dev/null


    exit 1
  fi

else # case of Cloud Build
# The following was copied from CAPI1.0 )&gt; not UPDATED YET AS CAPI2.0 DOES NOT OFFER Partial RECONFIGURATION
# FAB never for the moment but if needed, needs to adapt (BSUB, etc)
  echo &quot;CAPI2 Partiel Reconfiguration not available&quot;
  echo &quot;Exiting...&quot;
  exit 1
  
  mkdir -p ${SNAP_ROOT}/hardware/DCPs
  echo &quot;J:`date` Build Cloud Image ...&quot;
  echo &quot;export DCP_ROOT=${SNAP_ROOT}/hardware/DCPs/&quot;              &gt;&gt; snap_env.sh
  echo &quot;ENABLE_PRFLOW=y&quot;                                          &gt;&gt; .snap_config
  echo &quot;ENABLE_CLOUD_USER_FLOW=n&quot;                                 &gt;&gt; .snap_config
  echo &quot;ENABLE_CLOUD_BUILD_BITFILE=n&quot;                             &gt;&gt; .snap_config
  make -s oldconfig
  echo &quot;J:Build Static Region ...&quot;
  bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make cloud_base&quot; || exit
  echo &quot;J:Build Action Region ...&quot;
  bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make cloud_action&quot; || exit
  echo &quot;J:Merge Static and Action Region ...&quot;
  echo &quot;ENABLE_CLOUD_BUILD_BITFILE=y&quot;                             &gt;&gt; .snap_config
  make -s oldconfig
  bsub $LSF -J &quot;${CRD}_${ACT}_image&quot; &quot;make cloud_merge&quot; || exit
fi


#==============================================================================================
# Checking generated binaries

# when using a parallel flash we have only 1 binary file
# when using a SPI8 flash we have 2 binary files to deal with

echo;echo &quot;****************************************************************************************&quot;
echo &quot;J: Checking generated $ACT binaries for $CRD... (`date`)&quot;
echo

#BINFILES contains binary name (In SPI : &quot;primary and secondary&quot; names)
BINFILES=`ls ${SNAP_ROOT}/hardware/build/Images/fw_[0-9]*.bin|grep -v FACTORY|head -n2`
BITFILES=`ls ${SNAP_ROOT}/hardware/build/Images/fw_[0-9]*.bit|grep -v FACTORY|head -n2`

if [ &quot;$BINFILES&quot; == &quot;&quot; ]; then echo &quot;  --&gt; cannot find binary files&quot;;exit 1
fi

COUNT_IMAGE=0
unset IMAGE
for  f in $BINFILES; do                   
  size=`ls -al $f | awk &apos;{print $5}&apos;`
  echo &quot;binfile=$f&quot;
  echo &quot;   -&gt; size=$size&quot;
  (( size &lt; 100000 )) &amp;&amp; die 1 &quot;  --&gt; image $f is too small $size to burn&quot;
 
  IMAGE[$COUNT_IMAGE]=&quot;/home/${HWUser}/images/${CRD}/${ACT}/&quot;`basename $f` 
  COUNT_IMAGE=`expr $COUNT_IMAGE + 1`
done


#==============================================================================================
# if FACTORY requested, copying bit files to $FactoryDir
# In FACTORY MODE : We save hdl_example and hls_helloworld bit for cards files for future .mcs generation

FactoryDir=${RootSaveDir}/${CRD}/${CRD}_FACTORY_MCS/Build${BUILD_NUMBER}
FACTBITFILES=&quot;&quot;
FACTBINFILES=&quot;&quot;

case ${ACT}:$FACTORY in

  hdl_example.NORAM:true ) 
    
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: ${ACT} action and FACTORY requested&quot;

    FACTBITFILES=`ls -t $SNAP_ROOT/hardware/build/Images/fw_*[0-9]_FACTORY*.bit`  # take FACTORY bit files
    FACTBINFILES=`ls -t $SNAP_ROOT/hardware/build/Images/fw_*[0-9]_FACTORY*.bin`  # FACTORY bin files for further use
    
    if [ &quot;$FACTBITFILES&quot; == &quot;&quot; ] ; then
      echo &quot;  --&gt; cannot find any Factory bit file from $SNAP_ROOT/hardware/build/Images/fw_\*_FACTORY\*.bit although FACTORY REQUESTED !!&quot;
      exit 1
    fi

    mkdir -p $FactoryDir
	echo &quot;  --&gt; Copying $CRD $ACT Factory bit file to $FactoryDir&quot;
    cp -rp $FACTBITFILES $FactoryDir
    ;;

  hls_helloworld:true )
    
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: ${ACT} action and FACTORY requested&quot;

    if [ &quot;$BITFILES&quot; == &quot;&quot; ] ; then
      echo &quot;  --&gt; cannot find any User bit file from $SNAP_ROOT/hardware/build/Images/fw_\*.bit !!&quot;
      exit 1
    fi


    mkdir -p $FactoryDir
     
	echo &quot;  --&gt; Copying ${CRD} $ACT bit file to $FactoryDir&quot;
    cp -rp $BITFILES $FactoryDir
    ;;
    
esac


#==============================================================================================
# MCS file generation
# Compile the MCS file from FACTORY and USER bitstreams

case ${ACT}:$FACTORY in

  hdl_example.NORAM:true|hls_helloworld:true )
  
  echo;echo &quot;****************************************************************************************&quot;
  echo &quot;J: ${ACT} action and FACTORY requested ==&gt; Checking if everything&apos;s here to build MCS file&quot;

  # Checking Factory and User bitstreams are both here &amp; no lock file is present
  # If everything&apos;s OK, building MCS file
  
  echo &quot;  -&gt; Checking if Factory and User bitstreams are here...&quot;
  factory_bitstream=`ls -t $FactoryDir/fw_*[0-9]_FACTORY*.bit 2&gt;/dev/null`
  echo &quot;     FACTORY bitstream file = $factory_bitstream&quot;
  user_bitstream=`ls -t $FactoryDir/fw_*[0-9].bit 2&gt;/dev/null`  
  echo &quot;     USER bitstream file = $user_bitstream&quot;
  
  
  if [[ &quot;$factory_bitstream&quot; != &quot;&quot; ]] &amp;&amp; [[ &quot;$user_bitstream&quot; != &quot;&quot; ]] ; then
    echo &quot;  -&gt; Both bitstream files are present in $FactoryDir ==&gt; going further...&quot;
    MCSLock=$FactoryDir/MCSLock
    
    user_name=`basename $user_bitstream | sed &apos;s/.bit//g&apos; | cut -d&apos;_&apos; -f5- `
    mcs_bitstream=${factory_bitstream%.bit}___${user_name}.mcs
    
    if [ ! -f $MCSLock ]; then
      touch $MCSLock # create a lock to prevent two build_mcs.tcl running in parallel
      echo &quot;  -&gt; Building MCS file...&quot;
      
      cd ${SNAP_ROOT}
      source .snap_config.sh   
      RC_MCS=0; ./hardware/setup/build_mcs.tcl $factory_bitstream $user_bitstream $mcs_bitstream | RC_MCS=$?
      rm -f $MCSLock
      
      if [ $RC_MCS -eq 0 ]; then
        # Copying mcs + prm files to $SaveDir (local + $IMGservers) 
        LinkDir=${RootSaveDir}/${CRD}/${CRD}_FACTORY_MCS
        mcs_files=${mcs_bitstream%.mcs}*.mcs # Because for some card (AD9V3, AD9H3), 2 mcs files are generated (*_primary.mcs &amp; *_secondary.mcs)
        prm_files=${mcs_bitstream%.mcs}*.prm # Because when two MCS files, two RPM files (*_primary.rpm &amp; *_secondary.rpm)
        SRCFILES=&quot;$mcs_files $prm_files&quot;
        CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser

        #rm -rf $FactoryDir 

	    echo; echo &quot;  -&gt; ls -latr $SaveDir:&quot;
        ls -latr $SaveDir
      fi
    else
      echo &quot;  -&gt; MCS build running ($MCSLock file present) ==&gt; doing nothing&quot;
    fi
  else
    echo &quot;  -&gt; Both bitstream files couldn&apos;t be found !! ==&gt; doing nothing for the moment&quot;
  fi  


  ;;
esac


#==============================================================================================
# Checking if we can test the generated binaries on POWER Hardware (checking NO_TEST_CARDS list)

case ${TEST_ON_HW} in

  true )
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: Checking if we can test the generated binaries on POWER Hardware (test_on_hw=${TEST_ON_HW} for card=${CRD})&quot;
    echo
    TestCardAllowed=1
    for i in ${NO_TEST_CARDS[@]}
    do
      if [ &quot;$CRD&quot; == &quot;$i&quot; ];then TestCardAllowed=0;fi
    done

    if [ $TestCardAllowed -eq 0 ]
    then
      echo &quot;  -&gt; No test CARD $CRD available...&quot;
      LinkDir=${RootSaveDir}/${CRD}/${CRD}_test_bypassed
      SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
      CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
      echo &quot;  -&gt; EXITING !&quot;
      exit 0
    else
      echo &quot;  -&gt; OK&quot;
    fi
  ;;
  
  false )
    echo;echo &quot;****************************************************************************************&quot;
    echo &quot;J: No test on POWER Hardware requested (test_on_hw=${TEST_ON_HW} for card=${CRD})&quot; 
    echo
    LinkDir=${RootSaveDir}/${CRD}/${CRD}_no_test_requested
    SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
    CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
    exit 0
  ;;

esac


#==============================================================================================
#==============================================================================================
#==============================================================================================


#==============================================================================================
# Testing the generated binaries on POWER Hardware
# (if $TEST_ON_HW==true and $CRD NOT into $NO_TEST_CARDS[*])

echo &quot;TARGET_DIR=${TARGET_DIR}&quot;
echo &quot;Current Dir is &quot; `pwd`
echo &quot;  -&gt; JOB_NAME:        ${JOB_NAME}&quot;
echo &quot;  -&gt; IMAGE:           ${IMAGE}&quot;
echo &quot;  -&gt; CARD_TO_TEST:    ${CRD}&quot;
echo &quot;  -&gt; ACTION:          ${ACT}&quot;
echo &quot;  -&gt; GIT_Branch:      ${GIT_BRANCH}&quot;
echo &quot;  -&gt; GIT_Commit:      ${GIT_COMMIT}&quot;

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Checking TestBoxes reachability (test_on_hw=${TEST_ON_HW} for card=${CRD})&quot;
echo
echo &quot;  -&gt; testboxes now = ${TESTBOXES[@]}&quot;
echo

for box in &quot;${TESTBOXES[@]}&quot;;do
  echo &quot;----------------------------------------------------&quot;
  if [[ ${mopBoxes[*]} =~ $box ]]
  then
    # $box is a Montpellier server
    echo -e &quot;MOP   : $box -&gt; \c&quot;
    RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
  else
    # $box is an Austin server
    echo -e &quot;AUSTIN: $box -&gt; \c&quot;
    RC=0;ssh ${HWUser}@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
  fi

if [ $RC -eq 0 ]; then
    echo &quot;OK&quot;
  else
    echo &quot;FAILED !&quot;
    for i in &quot;${TESTBOXES[@]}&quot;; do [[ $i != $box ]] &amp;&amp; new+=($i);done   # generate new test array without unreachable box
    unset TESTBOXES;TESTBOXES=(&quot;${new[@]}&quot;);unset new                   # reassign to original array name
    echo &quot;$box not reachable =&gt; removed from testing boxes list&quot;
    echo &quot;testboxes remaining = ${TESTBOXES[@]}&quot;
    if [[ &quot;${TESTBOXES[@]}&quot; == &quot;&quot; ]];then echo &quot;no test machines available anymore&quot;;exit 1;fi
  fi
done # for box

echo;echo &quot;----------------------------------------------------&quot;
echo &quot;testboxes now = ${TESTBOXES[@]}&quot;


function finish {  # define function to unlock in case of error, executed after registering with &quot;trap finish EXIT&quot;
  echo;echo &quot;***************************************************************************************&quot;
  echo &quot;J: FINISH function&quot;
  
  echo &quot;RC=$?&quot;
  echo;echo &quot;  -&gt; unlocking ${LOCK}&quot;
  UNLOCK_RC=0;ssh ${HWUser}@$box rmdir ${LOCK} || UNLOCK_RC=$?
  echo &quot;box=$box lock=$LOCK unlock RC=$UNLOCK_RC (`date`)&quot;
  echo;echo &quot;  -&gt; cleaning ${box}@$TARGET_DIR&quot;
  CLEAN_RC=0;ssh -T ${HWUser}@$box rm -rf ${TARGET_DIR} || CLEAN_RC=$?
  echo &quot;box=$box clean target_dir=$TARGET_DIR RC=$CLEAN_RC (`date`)&quot;
  echo;echo &quot;  -&gt; EXITING !&quot;  
}


maxloop=60
echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Searching (max $maxloop min) for free card=$CRD into ( ${TESTBOXES[@]} ) (`date`)&quot;

FindCardTool=&quot;snap_find_card&quot;

for loop in `seq 1 $maxloop`;do

  echo;echo &quot;*************************************************&quot;
  echo &quot;J: LOOP $loop/$maxloop (`date`)&quot;

  global_found=0

  for box in &quot;${TESTBOXES[@]}&quot;;do

    echo;echo &quot;-------------------------------------------------&quot;
    echo &quot;$box&quot;

    nusers=`ssh ${HWUser}@${box} who|grep -v root|grep -v ${HWUser}|wc -l`

    find_card=$FindCardTool.${GIT_COMMIT}.`date +%H%M%S`.`basename $BINFILES`

    echo  &quot;  --&gt; Copying the tool $FindCardTool ($find_card) to $box:/home/${HWUser}&quot;
    RC=0;scp ./software/tools/$FindCardTool ${HWUser}@$box:/home/${HWUser}/$find_card ; RC=$?
    if [ $RC -gt 0 ];then
      echo &quot;     -&gt; copy $find_card to $box FAILED, continuing anyway...&quot;;
    fi
    
    echo -e &quot;  --&gt; Using the tool, looking for $CRD inside ${box}: \c&quot;
    found=0;ssh -ttq ${HWUser}@${box} /home/${HWUser}/$find_card -A ${CRD} &gt; /dev/null 2&gt;&amp;1 ||found=$?
    # ($find_card gives the number of found cards inside $?)
    
    if [ $found -ne 0 ];then
      echo -e &quot;OK: $found CARD(S) FOUND &quot;
      global_found=$((global_found+found))
      cards=`ssh -ttq ${HWUser}@${box} &quot;/home/${HWUser}/$find_card -A ${CRD} 2&gt;/dev/null&quot; | head -n1`   
      echo &quot;(card-IDs= $cards)&quot;
      # (head is needed because if more than 1 card, $find_card returns something like &quot;0 0&quot; and second line with &quot;Total 2 cards detected&quot;)
    else
      echo &quot;FAILED: NO CARD FOUND&quot;
      unset cards
    fi

    echo &quot;  --&gt; Removing the tool $FindCardTool ($find_card) from $box&quot;
    SSH_RC=0;ssh -ttq ${HWUser}@${box} rm /home/${HWUser}/$find_card || SSH_RC=$?
    if [ $SSH_RC -gt 0 ];then
      echo &quot;    -&gt; Delete $find_card to $box FAILED, continuing anyway...&quot;;
    fi

	echo;echo &quot;J: loop=$loop box=$box nusers=$nusers card=$CRD $FindCardTool found=$found (`date`)&quot;
    echo

    hours=`date +%H`

    case $found:$nusers in

      #------------------------------------
      # no card available =&gt; try other box
      0:*)
        for i in &quot;${TESTBOXES[@]}&quot;; do [[ $i != $box ]] &amp;&amp; new+=($i);done   # generate new test array without unreachable box
        unset TESTBOXES;TESTBOXES=(&quot;${new[@]}&quot;);unset new                   # reassign to original array name
        echo &quot;  --&gt; No $CRD card available in $box =&gt; removed from Boxes testing list, remaining list= ${TESTBOXES[@]}&quot;        
        echo &quot;  --&gt; Trying next box / loop...&quot;
      ;;

      #------------------------------------
      # card available &amp; no user =&gt; now lock &amp; test
      [1234]:0)
		for cardid in $cards;do
      	  LOCK=&quot;jenkins_lock_card$cardid&quot;
		  RC=0;ssh ${HWUser}@$box &quot;mkdir ${LOCK} 2&gt;/dev/null&quot;||RC=$?
		  if [ $RC == &quot;0&quot; ]; then :
		    echo &quot;  --&gt; box=$box lock=$LOCK lock RC=$RC (`date`)&quot;; 
		    trap finish EXIT  # register finish/unlock function, after lock is set
		    break 3 # found card and no user =&gt; going out of $box for-loop and $loop for-loop
	      else 
		    echo &quot;  --&gt; box=$box lock=$LOCK already locked, try next card&quot;
		  fi    
		done
      ;;

      #------------------------------------
      # found something else than 1,2,3 or 4 cards =&gt; meaning BAD $found return code
      *:0)      
        echo &quot;  --&gt; unknown found_RC=$found from $FindCardTool=$cards. EXITING...&quot;
        exit 1
      ;;

      #------------------------------------
      # card available but user(s) connected...
      *)      
      	if (( 9&lt;=hours &amp;&amp; hours&lt;=19 ));then
          # It is day time =&gt; priority to interactive users
      	  echo &quot;  --&gt; $CRD card found but day time (hours=$hours) and users connected (nusers=$nusers), trying next box / loop...&quot;

        else
          # It is night =&gt; running on $box even if there are connected users
          ssh ${HWUser}@${box} who|grep -v root|grep -v ${HWUser}
      	  echo &quot;  --&gt; hours=$hours (night), nusers=$nusers, now lock &amp; notify &amp; test&quot;
		  for cardid in $cards;do
      	    LOCK=&quot;jenkins_lock_card$cardid&quot;
		    RC=0;ssh ${HWUser}@$box &quot;mkdir ${LOCK} 2&gt;/dev/null&quot;||RC=$?
		    if [ $RC == &quot;0&quot; ]; then :
	  	      echo &quot;  --&gt; box=$box lock=$LOCK lock RC=$RC (`date`)&quot;; 
	   	      trap finish EXIT  # register finish/unlock function, after lock is set
              ssh ${HWUser}@$box wall &quot;WARNING: JENKINS CAPI2 TEST STARTING NOW on FPGA CARD=$CRD ID=$cards&quot;
		      break 3 # found card and it is the night =&gt; going out of $box for-loop and $loop for-loop
			else 
			  echo &quot;  --&gt; box=$box lock=$LOCK already locked, try next card&quot;
			fi    
          done
        fi
      ;;
      
    esac
    
  if [[ $box == ${TESTBOXES[*]:(-1)} ]] &amp;&amp; [[ $global_found -gt 0 ]]; then
    echo &quot;J: $box was the last system to test. We globally found $global_found $CRD card(s) but user(s) were connected&quot;
    echo &quot;   Waiting for 60s and go to next loop...&quot;
    sleep 60
  fi
    
  done # for box
  
done #for loop


if [ $loop -eq $maxloop ];then
  echo;echo &quot;***************************************************************************************&quot;
  echo &quot;J: No card $CRD available with TESTBOXES= ${TESTBOXES[*]}&quot;
  echo

  LinkDir=${RootSaveDir}/${CRD}/${CRD}_not_available
  SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
  CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
  echo &quot;  -&gt; EXITING !&quot;
  exit 100
fi

echo;echo &quot;***************************************************************************************&quot;
echo &quot; running test --&gt; $box&quot;  | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos;
echo &quot;***************************************************************************************&quot;

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Preparing $CRD card image(s) test onto $box system&quot;
echo
echo -e &quot;  -&gt; Power OS release: \c&quot;; ssh ${HWUser}@${box} &quot;grep PRETTY_NAME /etc/os-release | cut -d= -f2&quot;
echo
ssh ${HWUser}@${box} &quot;echo ------ START of JOB on $box ----&gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;date                                 &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo JOB_NAME  : $JOB_NAME           &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Card      : $CRD[$cardid]       &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Image     : ${IMAGE[*]}         &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Build No  : ${BUILD_NUMBER}     &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo Git Branch: ${GIT_BRANCH}       &gt;&gt; jenkins.log&quot;

trap finish EXIT  # register finish/unlock function, after lock is set

echo &quot;  -&gt; Preparing snap workspace by cloning ${GIT_URL} into ${box}:${TARGET_DIR} using branch= ${GIT_BRANCH}&quot;
RC=0; ssh ${HWUser}@${box} &quot;git clone ${GIT_URL} ${TARGET_DIR};cd ${TARGET_DIR};git checkout ${GIT_BRANCH}&quot; || RC=$?

if [ $RC -ne 0 ];then

    LinkDir=${RootSaveDir}/${CRD}/${CRD}_gitclone_error
    SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
    CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
	echo &quot;  -&gt; EXITING !&quot;
	exit 1
fi

echo &quot;  -&gt; Copying image(s) to ${box}:/home/${HWUser}/images/${CRD}/${ACT}&quot;
ssh $box mkdir -p /home/${HWUser}/images/${CRD}/${ACT}    # create subdirectory, if not avail yet

COUNT_IMAGE=0                         # Modification to support SPI dual files cases
unset IMAGE
for f in $BINFILES
do
  IMAGE[$COUNT_IMAGE]=&quot;/home/${HWUser}/images/${CRD}/${ACT}/&quot;`basename $f`
  echo &quot;      $f -&gt; ${box}:${IMAGE[$COUNT_IMAGE]}&quot;
  RSYNC_RC=0;rsync -tvh $f ${HWUser}@$box:${IMAGE[$COUNT_IMAGE]} ; RSYNC_RC=$?
  if [ $RSYNC_RC -ne 0 ];then 
    echo &quot;  -&gt; copy FAILURE&quot;;
    break # Failure =&gt; going out of the for-loop
  fi
  COUNT_IMAGE=`expr $COUNT_IMAGE + 1`
done

if [ $RSYNC_RC -ne 0 ]; then

  LinkDir=${RootSaveDir}/${CRD}/${CRD}_rsync_error
  SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
  CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
  echo &quot;EXITING !&quot;
  exit 1
fi

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Testing $CRD card image(s) with Power $box system&quot;
echo

# ssh fpga@${box} lsb_release -a

echo &quot;  -&gt; Preparing command ...&quot;
RUN=&quot;./actions/scripts/snap_jenkins.sh&quot;
if [ ! -f $RUN ];then 
  echo &quot;  -&gt; Shell Script $RUN not found =&gt; EXITING !&quot;
  exit 1
fi

RUN+=&quot; -D ${TARGET_DIR}&quot;

BinFilesList=( $BINFILES )
if [ ${#BinFilesList[@]} -gt 1 ]; then
  # More than 1 image file (like with AD9V3 which will have 2)
  SPI8=1
else
  # Only 1 image file
  SPI8=0
fi

echo &quot;     Card=$CRD and SPI8=$SPI8&quot;

# For debugging purpose, if not giving an IMAGE to next $RUN test command, the $RUN command would run the test with
# the already in-place image inside the FPGA, without trying to reset the FPGA &amp; flash the new image.
# So you just need to uncomment the following line (unset IMAGE) to do so (deleting any IMAGE reference)
#unset IMAGE

if [ ${#IMAGE[@]} -eq 0 ]; then
  # no IMAGE to test=&gt; $RUN will just test the image already inside the FPGA (no reset, no flash)
  RUN+=&quot; -A ${CRD}&quot;
else
  if [ $SPI8 -eq 0 ]; then RUN+=&quot; -F ${IMAGE} -A ${CRD} -C $cardid&quot;;fi
  if [ $SPI8 -eq 1 ]; then RUN+=&quot; -F ${IMAGE[0]} -f ${IMAGE[1]} -A ${CRD} -C $cardid&quot;;fi
fi

echo;echo &quot;  -&gt; RUN command= $RUN&quot;


echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Building the software and actions on $box in $TARGET_DIR ...&quot;
echo
echo &quot;  -&gt; make clean software actions&quot;
echo
RC=0;ssh ${HWUser}@$box make -C ${TARGET_DIR} clean software actions || RC=$?

if [ $RC -ne 0 ]; then
  echo;echo &quot;  -&gt; make clean software actions FAILED&quot;
  echo &quot;  -&gt; EXITING !&quot;
  exit 1
fi

# Git clone capi-utils tools into $box:/home/$HWUser

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Git cloning Capi-Utils tools into $box:/home/$HWUser...&quot;
echo &quot;  (capi-flash-script.sh used by command `echo $RUN | cut -d&apos; &apos; -f1` )&quot;
ssh ${HWUser}@${box} &quot;rm -rf capi-utils &amp;&amp; git clone -b $CAPIUTILS_BRANCH $CapiUtilsURL&quot;

#------------------------------------------------------------------------------------------------------------------------------
# Build the capi-utils software into $box:/home/$HWUser/capi-utils on the $box

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Building the capi-utils software on $box in /home/$HWUser/capi-utils...&quot;
echo &quot; capi-utils is compiled locally to prevent over-writing the server default config (/lib/capi-utils preserved)&quot;
ssh ${HWUser}@${box} make -C /home/$HWUser/capi-utils


echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Executing below SNAP Jenkins test on $box from ${TARGET_DIR} directory (`date`):&quot;
echo &quot;  -&gt; $SudoOrNotSudo ${RUN}&quot;
echo

RC=0;ssh -T ${HWUser}@${box} &lt;&lt; EOF || RC=$?
	export TERM=xterm
	cd ${TARGET_DIR}
    pwd
	set -f  # the set -f command disables file name generation (&quot;path name expansion&quot;), meaning &quot;*.zip&quot; stays &quot;*.zip&quot;
    $SudoOrNotSudo ${RUN}
EOF


# Write short log only, Clean workspace
# Note: this lines in the log file and the lines above can be 
ssh ${HWUser}@${box} &quot;echo Exit: $JOB_NAME RC = $RC at:\       &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;date                                     &gt;&gt; jenkins.log&quot;
ssh ${HWUser}@${box} &quot;echo ----------- EXIT -------------------&gt;&gt; jenkins.log&quot;

echo;echo &quot;***************************************************************************************&quot;
echo &quot;J: Cleaning up ${box}:${TARGET_DIR} (`date`)&quot;
echo
RM_RC=0;ssh -T ${HWUser}@${box} rm -rf ${TARGET_DIR} || RM_RC=$?

if [ $RM_RC -eq 0 ]; then
  echo &quot;  -&gt; Cleaning operation: OK&quot;
else
  echo &quot;  -&gt; Cleaning operation: FAILED&quot;
fi
  
if [ $RC -eq 0 ]; then
  echo;echo &quot;***************************************************************************************&quot;
  echo &quot;J: Test SUCCEEDED RC= $RC (`date`)&quot;
  
  echo &quot;  -&gt;  CARD $CRD Hardware test succeeded...&quot;  
  LinkDir=${RootSaveDir}/${CRD}/${CRD}_test_OK
  SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
  CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser

else
  echo;echo &quot;***************************************************************************************&quot;
  echo &quot;J: Test FAILED RC= $RC (`date`)&quot;
  
  echo &quot;  -&gt;  CARD $CRD Hardware test failed...&quot;
  LinkDir=${RootSaveDir}/${CRD}/${CRD}_test_failure
  SRCFILES=&quot;$BINFILES $BITFILES $FACTBINFILES $FACTBITFILES&quot;
  CopyToDir -c $CRD -f &quot;$SRCFILES&quot; -d $SaveDir -l $LinkDir -s &quot;$IMGServers&quot; -u $HWUser
  echo &quot;  -&gt; EXITING !&quot;
  exit 1
fi 
</command>
      <unstableReturn>100</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.29">
      <recipients>fabrice_moyen@fr.ibm.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.37">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
        <timeoutSecondsString>14400</timeoutSecondsString>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.FailOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.10"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER} ${GIT_BRANCH} Vivado=${ENV,var=&quot;VIVADO_CHOICE&quot;} HWTest=${ENV,var=&quot;TEST_ON_HW&quot;} NOHWCards= ${ENV,var=&quot;NO_TEST_CARDS&quot;}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
    <touchStoneCombinationFilter>ACT==&quot;test&quot; &amp;&amp; CRD_CL==&quot;AD9V3_nCL&quot;</touchStoneCombinationFilter>
    <touchStoneResultCondition>
      <name>UNSTABLE</name>
      <ordinal>1</ordinal>
      <color>YELLOW</color>
      <completeBuild>true</completeBuild>
    </touchStoneResultCondition>
  </executionStrategy>
  <childCustomWorkspace>${BRANCH}/${COMBINATION}</childCustomWorkspace>
</matrix-project>