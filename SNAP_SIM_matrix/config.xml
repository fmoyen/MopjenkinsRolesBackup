<?xml version='1.1' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.14">
  <actions/>
  <description>CAPI1&amp;2 : Builds and simulates many different configurations, automatic nightruns on master&#xd;
Contacts : alexandre.castellane@fr.ibm.com or fabrice_moyen@fr.ibm.com&#xd;
&#xd;
November 2019: Job imported from hdcl070Boeblingen jenkins server&#xd;
Original ACT matrix:&#xd;
hdl_example.SDRAM&#xd;
hdl_example.BRAM&#xd;
hdl_example.NORAM&#xd;
hdl_helloworld&#xd;
hdl_example.SDRAM.NVME.DENALI&#xd;
hdl_example.SDRAM.NVME&#xd;
hdl_nvme_example.BRAM.NVME.DENALI&#xd;
hdl_nvme_example.BRAM.NVME&#xd;
hls_nvme_memcopy.DENALI&#xd;
hls_nvme_memcopy&#xd;
hls_memcopy&#xd;
hls_bfs&#xd;
hls_hashjoin&#xd;
hls_search&#xd;
hls_sponge&#xd;
hls_helloworld&#xd;
hls_decimal_mult&#xd;
hls_scatter_gather&#xd;
hls_latency_eval&#xd;
hls_parallel_memcpy&#xd;
hls_vector_generator&#xd;
test&#xd;
&#xd;
2019 Dec 3rd : Removed irun_201x.y type entries&#xd;
&#xd;
April 26th 2019 : filter : CAPI1 2018.1 CAPI2 2018.2or 3, U200 2018.3 RCXVUP 2017.4&#xd;
&#xd;
2018 nov 19 :&#xd;
Removed xcelium_2018.2 variable as we can&apos;t support it now.&#xd;
Removed hls_intersect_s &amp; hls_intersect_h from matrix</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.11"/>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
      <projectUrl>https://github.com/open-power/snap/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Choose the branch for https://github.com/open-power/snap you want to test. Please do not use wildcards!!</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HDL</name>
          <description>enable/disable HDL examples simulation</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HLS</name>
          <description>enable/disable HLS examples simulation</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>ADKU3</name>
          <description>enable/disable ADKU3 simulation (CAPI1)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD8K5</name>
          <description>enable/disable AD8K5 simulation (CAPI1)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>N250S</name>
          <description>enable/disable N250S simulation (CAPI1)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>S121B</name>
          <description>enable/disable S121B simulation (CAPI1)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>N250SP</name>
          <description>enable/disable N250SP simulation (CAPI2)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>FX609</name>
          <description>enable/disable FX609 simulation (CAPI2)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>S241</name>
          <description>enable/disable S241 simulation (CAPI2)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD9V3</name>
          <description>enable/disable AD9V3 simulation (CAPI2)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD9H3</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AD9H7</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>U200</name>
          <description>enable/disable U200 simulation (CAPI2)</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>XSIM</name>
          <description>enable/disable model build with XSIM</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>IRUN</name>
          <description>enable/disable model build with IRUN</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
      <limitOneJobWithMatchingParams>true</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>false</throttleMatrixBuilds>
        <throttleMatrixConfigurations>true</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/open-power/snap</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>snap</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.PruneStaleBranch/>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>X86_UBUNTU</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>ACT</name>
      <values>
        <string>hdl_helloworld</string>
        <string>hls_helloworld</string>
        <string>hls_memcopy</string>
        <string>hls_udp</string>
        <string>hls_image_filter</string>
        <string>test</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>CRD</name>
      <values>
        <string>ADKU3</string>
        <string>AD8K5</string>
        <string>N250S</string>
        <string>S121B</string>
        <string>N250SP</string>
        <string>FX609</string>
        <string>S241</string>
        <string>AD9V3</string>
        <string>AD9H3</string>
        <string>AD9H7</string>
        <string>U200</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>SIM_VIV</name>
      <values>
        <string>xsim_2020.2</string>
        <string>xsim_2020.1</string>
        <string>xsim_2019.2</string>
        <string>xsim_2019.1</string>
        <string>xsim_2018.3</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>X86_UBUNTU</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <combinationFilter>(   (ACT=~ &quot;hls&quot; &amp;&amp; HLS==&quot;true&quot;)    ||    (ACT=~&quot;hdl&quot; &amp;&amp; HDL==&quot;true&quot; ) ) &amp;&amp; ( (CRD==&quot;ADKU3&quot; &amp;&amp; ADKU3==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; !(ACT=~&quot;hls_scatter_gather&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.1&quot;) || (SIM_VIV=~&quot;2018.3&quot;))  ) ||       (CRD==&quot;AD8K5&quot; &amp;&amp; AD8K5==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; !(ACT=~&quot;hls_scatter_gather&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.1&quot;) || (SIM_VIV=~&quot;2018.3&quot;))  ) ||       (CRD==&quot;N250S&quot; &amp;&amp; N250S==&quot;true&quot;  &amp;&amp; !(ACT=~&quot;hls_scatter_gather&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.1&quot;) || (SIM_VIV=~&quot;2018.3&quot;))  ) ||       (CRD==&quot;S121B&quot; &amp;&amp; S121B==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; !(ACT=~&quot;hls_scatter_gather&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.1&quot;) || (SIM_VIV=~&quot;2018.3&quot;) )  ) ||       (CRD==&quot;RCXVUP&quot; &amp;&amp; RCXVUP==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; (SIM_VIV=~&quot;2017.4&quot;) ) ||       (CRD==&quot;AD9V3&quot; &amp;&amp; AD9V3==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.2&quot;) || (SIM_VIV=~&quot;2018.3&quot;) || (SIM_VIV=~&quot;2019.2&quot;)) ) ||       (CRD==&quot;AD9H3&quot; &amp;&amp; AD9H3==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; (SIM_VIV=~&quot;2019.2&quot;) ) ||       (CRD==&quot;AD9H7&quot; &amp;&amp; AD9H7==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; (SIM_VIV=~&quot;2019.2&quot;) ) ||       (CRD==&quot;U200&quot; &amp;&amp; U200==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.2&quot;) || (SIM_VIV=~&quot;2018.3&quot;)) ) ||       (CRD==&quot;S241&quot; &amp;&amp; S241==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.2&quot;) || (SIM_VIV=~&quot;2018.3&quot;) || (SIM_VIV=~&quot;2019.2&quot;)) ) ||       (CRD==&quot;FX609&quot; &amp;&amp; FX609==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.2&quot;) || (SIM_VIV=~&quot;2018.3&quot;) || (SIM_VIV=~&quot;2019.2&quot;)) ) ||       (CRD==&quot;N250SP&quot; &amp;&amp; N250SP==&quot;true&quot; &amp;&amp; !(ACT=~&quot;NVME&quot; || ACT=~&quot;nvme&quot;) &amp;&amp; ((SIM_VIV=~&quot;2018.2&quot;) || (SIM_VIV=~&quot;2018.3&quot;) )) )  &amp;&amp;     (   (SIM_VIV=~&quot;irun&quot; &amp;&amp; IRUN==&quot;true&quot;)    ||    (SIM_VIV=~&quot;xsim&quot; &amp;&amp; XSIM==&quot;true&quot;)    ||    (SIM_VIV=~&quot;xcelium&quot; &amp;&amp; XCELIUM==&quot;true&quot;) ) ||        (ACT==&quot;test&quot; &amp;&amp; CRD==&quot;ADKU3&quot; &amp;&amp; SIM_VIV=~&quot;xsim&quot;) </combinationFilter>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set +x                           # reduce Jenkins output
echo &quot;****************************************************************************************&quot;
echo &quot;`date` BUILD START&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;EXECUTING FIRST SHELL FROM CAPI1&amp;2 SIM JENKINS ...&quot;
echo &quot;****************************************************************************************&quot;
echo

#==============================================================================================
# Variables

&gt; export_props.properties
NAME=$(echo $GIT_BRANCH| cut -d&apos;/&apos; -f 2 |tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;) # remove origin/ from branch and translate to lowercase
PREFIX=$(echo $NAME| cut -d&apos;_&apos; -f 1)    # chars up to first &apos;_&apos; identify need for test
ACTION_TYPE=$(echo $ACT| cut -d&apos;_&apos; -f 1 |tr &apos;[:lower:]&apos; &apos;[:upper:]&apos;) # get ACTION_TYPE (hls, hld) and translate to uppercase
SIM=$(echo $SIM_VIV| cut -d&apos;_&apos; -f 1 |tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)    # chars up to  first &apos;_&apos; identify Simulator and translate to lowercase
VIV=$(echo $SIM_VIV| cut -d&apos;_&apos; -f 2)    # chars behind first &apos;_&apos; identify Vivado version

CAPI2CardsList=( N250SP FX609 S241 RCXVUP AD9V3 AD9H3 AD9H7 U200 )
CAPI2=0
for i in ${CAPI2CardsList[@]}; do
  if [ &quot;$CRD&quot; == &quot;$i&quot; ]; then CAPI2=1; fi
done

echo &quot;Build with Card=$CRD CAPI2=$CAPI2 Action=$ACT Action_type=$ACTION_TYPE branch_selected=$BRANCH git_branch=$NAME prefix=$PREFIX&quot;

EmailDestinationList=( fabrice_moyen@fr.ibm.com )


#==============================================================================================
# Functions

# Function for sending alerting emails
# Example 1: SendAnEmail -s &quot;This is the subject/alert&quot; -d firstDest@gmail.com -d SecondDest@free.fr
# Example 2: SendAnEmail -s &quot;This is the subject/alert&quot; -d &quot;${EmailDestinationList[*]}&quot;
function SendAnEmail
{
  local OPTIND opt DestList
  while getopts &quot;s:d:&quot; opt
  do 
    case $opt in
      s)
        Subject=&quot;$OPTARG&quot;
      ;;
      d)
        DestList+=(&quot;$OPTARG&quot;)
      ;;
    esac
  done
  
  for i in ${DestList[@]}
  do
    echo &quot;&quot; | mail -s &quot;$Subject&quot; $i
  done
}


#==============================================================================================
# Do not run non-desired cases (action types, actions, cards)
# BSKIP stands for board skip

BSKIP=0
if [ &quot;${!ACTION_TYPE}&quot; == &quot;false&quot; ]; then BSKIP=1;fi # if ACTION_TYPE=&quot;HLS&quot;, ${!ACTION_TYPE} is identical to $HLS
if [ &quot;${!CRD}&quot;         == &quot;false&quot; ]; then BSKIP=1;fi # if CRD=&quot;AD9V3&quot;, ${!CRD} is identical to $AD9V3
if [ &quot;$ACT&quot;         == &quot;test&quot;   ]; then BSKIP=0;fi

echo;echo &quot;action_types (hdl,hls)=$ACTION_TYPE enabled_cards=$CRD BSKIP=$BSKIP&quot;


#==============================================================================================
# Following filtering will stop the current test if not required or not possible
# This will lead to a brown colored result meaning : aborted
# ASKIP stands for ACTION skip

case &quot;$CRD:$ACT:$SIM:$CAPI2&quot; in
  *:hls_scatter_gather:*:0 )    C=&quot;scc1&quot;;ASKIP=1;; # no scatter_gather for CAPI1 cards // test done by jenkins filter , could be removed, as well as the CAPI2 variable
  *:*DENALI*:xsim:* )           C=&quot;NVMD&quot;;ASKIP=1;; # DENALI doesnt work with xsim
  *:*NVME*:xsim:* )             C=&quot;NVMX&quot;;ASKIP=1;;
  *:*nvme*:xsim:* )             C=&quot;nvmX&quot;;ASKIP=1;;
  *:hdl_example.*RAM:xcelium:* )C=&quot;xce0&quot;;ASKIP=0;; # test xcelium on some hdl_example actions
  *:*:xcelium:* )               C=&quot;xce1&quot;;ASKIP=1;; # disable xcelium on all other actions
# AC 20180921 : removing intersect sims 
  *:hls_intersect_h:*:* )       C=&quot;inth&quot;;ASKIP=1;;
  *:hls_intersect_s:*:* )       C=&quot;ints&quot;;ASKIP=1;;
  *:hls_search:xsim:* )         C=&quot;srhx&quot;;ASKIP=1;; # too long testtime, wait for xsim performance fix
  *:hls_blowfish:*:* )          C=&quot;blow&quot;;ASKIP=1;; # no maintenance for blowfish
  *:hls_parallel_memcpy:*:*)
    if [[ $BRANCH != &quot;emrick&quot; ]]; then
      C=&quot;pmcp&quot;; ASKIP=1
    elif [[ $CRD != &quot;AD9V3&quot; &amp;&amp; $CRD != &quot;N250SP&quot; ]]; then
      C=&quot;pmcp&quot;; ASKIP=1
    fi;;
  *:hls_vector_generator:*:*)
    if [[ $BRANCH != &quot;emrick&quot; ]]; then
      C=&quot;vgen&quot;; ASKIP=1
    elif [[ $CRD != &quot;AD9V3&quot; &amp;&amp; $CRD != &quot;N250SP&quot; ]]; then
      C=&quot;vgen&quot;; ASKIP=1
    fi;;
    *:hls_udp:*:*)
    if [[ $CRD != &quot;AD9H3&quot; ]]; then
      C=&quot;udp&quot;; ASKIP=1
    fi;;
    *:hls_image_filter:*:*)             # This is to limit the number or tests
    if [[ $CRD != &quot;AD9H3&quot; &amp;&amp; $CRD != &quot;AD9V3&quot; &amp;&amp; $CRD != &quot;N250SP&quot; ]]; then
      C=&quot;imfi&quot;; ASKIP=1
    fi;;
  * )                           C=&quot;def&quot; ;ASKIP=0;;
esac        

echo;echo &quot;card=$CRD CAPI2=$CAPI2 action=$ACT Sim=$SIM VIV=$VIV case=$C ASKIP=$ASKIP&quot;


#==============================================================================================
# Specificities for some cards (such as another Vivado version)
# preventing to run what is not in tune with these specificities

# FAB: if CDS_INST_DIR is set, pslse/afu_driver/src/Makefile will search for vpi_user.h into $CDS_INST_DIR
#      Otherwise will look for vpi_user.h into $XILINX_VIVADO

# FAB: if VIV_VERSION unset, XILINX_VIVADO unset too (XILINX_VIVADO is set by: source $XILINX_ROOT/Vivado/${VIV_VERSION}/settings64.sh)

FSKIP=0 # stands for fineness skip

case $SIM:$VIV:$CRD in

  *RCXVUP) # adding specificity for RCXVUP card using an -es part (requires VIV2017.4) AC 20180921
    if [ $VIV != &quot;2017.4&quot; ]; then FSKIP=1; else echo &quot;Running with Vivado $VIV&quot;; fi # force 2017.4 for RCXVUP
#    export IES_VERSION=&quot;15.20.s18&quot;
#    export CDS_INST_DIR=/afs/bb/proj/cte/tools/cds/Incisiv/${IES_VERSION}
#    export IES_LIBS=/afs/bb/proj/fpga/framework/ies_libs/viv${VIV_VERSION}/ies${IES_VERSION}
    ;;
    
  *U200) # U200 is not supported in earlier versions than 2018.3 included
    if [ $VIV == &quot;2018.3&quot; ] || [[ $VIV =~ &quot;2019&quot; ]]; then echo &quot;Running with Vivado $VIV&quot;; else FSKIP=1; fi
#    export IES_VERSION=&quot;15.20.s18&quot;
#    export CDS_INST_DIR=/afs/bb/proj/cte/tools/cds/Incisiv/${IES_VERSION}
#    export IES_LIBS=/afs/bb/proj/fpga/framework/ies_libs/viv${VIV_VERSION}/ies${IES_VERSION}
    ;;
    
  xcelium:2018*:*)	# Xcelium needs Vivado 2018.1 or higher
    if [[ $VIV =~ &quot;2018&quot; ]] || [[ $VIV =~ &quot;2019&quot; ]]; then echo &quot;Running with Vivado $VIV&quot;; else FSKIP=1; fi
#    export IES_VERSION=&quot;17.10.002&quot;
#    export CDS_INST_DIR=/afs/bb/proj/cte/tools/cds/Xcelium/${IES_VERSION}
#    export IES_LIBS=/afs/bb/proj/fpga/framework/ies_libs/viv${VIV_VERSION}/xce${IES_VERSION}
    ;;
    
  xcelium:*:*)
    echo &quot;unsupported Vivado version $VIV for XCELIUM&quot;
    FSKIP=1
    ;;
    
  *)
    echo &quot;Running with Vivado $VIV&quot;
#	export IES_VERSION=&quot;15.20.s18&quot;
#	export CDS_INST_DIR=/afs/bb/proj/cte/tools/cds/Incisiv/${IES_VERSION}
#	export IES_LIBS=/afs/bb/proj/fpga/framework/ies_libs/viv${VIV_VERSION}/ies${IES_VERSION}
   ;;

esac

echo;echo &quot;Fineness (specificities) FSKIP=$FSKIP&quot;

#==============================================================================================
# Cleaning directories if ACT=test,
# else checking $CRD.action.defconfig file existence

echo;echo &quot;*******************************************************************************&quot;

case &quot;$ACT&quot; in

  test )
    echo &quot;ACT=test&quot;
    echo
    gitnames=`git ls-remote ${GIT_URL}|grep &quot;refs/heads/&quot;|awk &apos;{print $2}&apos;`; RC=$?
    echo &quot;RC=$RC gitnames=$gitnames&quot;

    echo
#    for dir in &quot;/afs/bb/proj/fpga/framework/CI_ws/SNAP_SIM_matrix&quot;/*;do
    for dir in &quot;/var/jenkins/workspace/SNAP_SIM_matrix&quot;/*;do
      if [ -d &quot;$dir&quot; ];then
        branch=&quot;refs/heads/&quot;`basename $dir`
        if [[ &quot;$gitnames&quot; =~ &quot;$branch&quot; ]];then echo &quot;branch=$branch found in gitnames, keeping dir=$dir&quot;
        else 
          echo &quot;branch=$branch not found in gitnames, deleting dir=\&apos;$dir\&apos;&quot;
          rm -rf &quot;$dir&quot;     # put in quotes to work for directories with blanks
        fi
      else echo &quot;$dir is not a directory, continuing&quot;
      fi
    done
    DSKIP=0
    ;;
    
  *&quot;hls_intersect&quot;* ) 
    echo;echo &quot;Checking snap/defconfig/$CRD.hls_intersect.defconfig existence (ACT=$ACT)&quot;
    if [ -f snap/defconfig/$CRD.hls_intersect.defconfig ];then
      DSKIP=0
      echo &quot;--&gt; OK&quot;
    else 
      echo &quot;--&gt; $CRD.hls_intersect.defconfig does not exist&quot;
      echo;echo &quot;ls snap/defconfig:&quot;;echo &quot;------------------&quot;
      ls snap/defconfig/
      DSKIP=1
    fi
    ;;
    
  *DENALI* )
    act2=${ACT%.DENALI}
    echo;echo &quot;Checking snap/defconfig/$CRD.$act2.defconfig existence (ACT=$ACT)&quot;
    if [ -f snap/defconfig/$CRD.$act2.defconfig ];then 
      DSKIP=0
      echo &quot;--&gt; OK&quot;
    else 
      echo &quot;--&gt; $CRD.$act2.defconfig does not exist&quot;
      echo;echo &quot;ls snap/defconfig:&quot;;echo &quot;------------------&quot;
      ls snap/defconfig/
      DSKIP=1
    fi
    ;;
    
  * )      
    echo;echo &quot;Checking snap/defconfig/$CRD.$ACT.defconfig existence&quot;
    if [ -f snap/defconfig/$CRD.$ACT.defconfig ];then
      DSKIP=0
      echo &quot;--&gt; OK&quot;
    else 
      echo &quot;--&gt; $CRD.$ACT.defconfig does not exist&quot;
      echo;echo &quot;ls snap/defconfig:&quot;;echo &quot;------------------&quot;
      ls snap/defconfig/
      DSKIP=1
    fi
    ;;  

esac

echo;echo &quot;defconfig SKIP=$DSKIP&quot;


#==============================================================================================
# Checking enough space is available

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Checking enough space is available&quot;
echo

#AFSused=`fs lq /afs/bb/proj/fpga/framework/CI_ws/SNAP_SIM_matrix/|grep -v Used|awk &apos;{print $4}&apos;|sed &apos;s/%//g&apos;|sed &apos;s/&lt;//g&apos;`
diskused=`df -h /var/jenkins/workspace/OC_IMG_matrix|grep -v Used|awk &apos;{print $5}&apos;|sed &apos;s/%//g&apos;|sed &apos;s/&lt;//g&apos;`
SSKIP=0;msg=&quot;disk usage =${diskused}%&quot;

if   (( diskused &gt; 90 ));then 
  msg=&quot;ERROR: $msg, stopping additional builds&quot;;SSKIP=1
  #SendAnEmail -s &quot;ERROR: Disk space is used up to ${diskused}%, stopping additional builds&quot; -d &quot;${EmailDestinationList[*]}&quot;
  #SendAnEmail -s &quot;ERROR: AFS space is used up to ${AFSused}%, stopping additional builds&quot; -d &quot;${EmailDestinationList[*]}&quot;  

elif (( diskused &gt; 70 ));then
  msg=&quot;WARNING: $msg&quot;
  #SendAnEmail -s &quot;WARNING: Disk space is used up to ${diskused}%&quot; -d &quot;${EmailDestinationList[*]}&quot;
  #SendAnEmail -s &quot;WARNING: AFS space is used up to ${AFSused}%&quot; -d &quot;${EmailDestinationList[*]}&quot;  

else
   msg=&quot;OK: $msg&quot;
fi
echo &quot;$msg&quot;

#==============================================================================================
# Aborting if something went wrong

if [ &quot;$ASKIP&quot; == &quot;1&quot; ] || [ &quot;$DSKIP&quot; == &quot;1&quot; ] || [ &quot;$BSKIP&quot; == &quot;1&quot; ] || [ &quot;$SSKIP&quot; == &quot;1&quot; ] || [ &quot;$FSKIP&quot; == &quot;1&quot; ];then SKIP=1;else SKIP=0;fi


#==============================================================================================
# Passing parameters to next script

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Forwarding parameters to next script&quot;
echo

echo &quot;SKIP=$SKIP&quot; &gt;&gt; export_props.properties
echo &quot;CRD=$CRD&quot; &gt;&gt; export_props.properties
echo &quot;CL=$CL&quot; &gt;&gt; export_props.properties
echo &quot;CAPI2=$CAPI2&quot; &gt;&gt; export_props.properties
echo &quot;SIM=$SIM&quot; &gt;&gt; export_props.properties
echo &quot;VIV=$VIV&quot; &gt;&gt; export_props.properties
echo &quot;EmailDestinationList=( ${EmailDestinationList[*]} )&quot; &gt;&gt; export_props.properties

echo &quot;properties passed to next shell:&quot;
cat export_props.properties
echo;echo &quot;*******************************************************************************&quot;
echo</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>export_props.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.2">
        <token>$SKIP</token>
      </condition>
      <buildStep class="org.jenkins_ci.plugins.fail_the_build.FixResultBuilder" plugin="fail-the-build-plugin@1.0">
        <defaultResultName>ABORTED</defaultResultName>
        <success></success>
        <unstable></unstable>
        <failure></failure>
        <aborted></aborted>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set +x                           # reduce Jenkins output
#ulimit -c unlimited             # reduce core dumps from what .profile says (kB)
ulimit -S -c 128000

echo;echo &quot;****************************************************************************************&quot;
echo &quot;EXECUTING SECOND SHELL FROM CAPI1&amp;2 SIM JENKINS (`date`)&quot;
echo &quot;****************************************************************************************&quot;
echo &quot;Simulating with Card=$CRD Action=$ACT CLOUD=$CL CAPI2=$CAPI2&quot;
echo


#==============================================================================================
# Variables

export PATH=$PATH:/usr/local/bin # python3 needs this path setup
export USERHOME=`pwd`
export SNAP_ROOT=$USERHOME/snap

#echo;echo &quot;********************************************************************************&quot;
#echo &quot;J: LSF SETUP ...&quot;
# echo
# older setup up to RH6
#export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/bin
#export LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/etc
#export LSF_LIBDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/lib
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/lib
#export LSF_BINDIR=/home/lsfbb/prod/10.1/linux2.6-glibc2.3-x86_64/bin
#export LSF_SUBMITTER_OSTYPE=Linux
#export LSF_ENVDIR=/home/lsfbb/prod/conf
#LSF=&apos;-P zsort -M 2 -C 2000 -I -n 4 -R type=X86_64 -R span[hosts=1]&apos;  # Project, GB_mem, KB_core, #_processors, type of processor

# new setup for RH7
#export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
#export LSF_SERVERDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/etc
#export LSF_LIBDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/lib
#export LSF_BINDIR=/home/lsfbb/prod/10.1/linux3.10-glibc2.17-x86_64/bin
#export LSF_SUBMITTER_OSTYPE=Linux
#export LSF_ENVDIR=/home/lsfbb/prod/conf
#LSF=&apos;-P zsort -M 2 -C 2000 -I -n 4 -R type=X86_64  -R osver=rh7 -R span[hosts=1]&apos;  # Project, GB_mem, KB_core, #_processors, type of processor


#==============================================================================================
# Functions

# Function for sending alerting emails
# Example 1: SendAnEmail -s &quot;This is the subject/alert&quot; -d firstDest@gmail.com -d SecondDest@free.fr
# Example 2: SendAnEmail -s &quot;This is the subject/alert&quot; -d &quot;${EmailDestinationList[*]}&quot;
function SendAnEmail
{
  local OPTIND opt DestList
  while getopts &quot;s:d:&quot; opt
  do 
    case $opt in
      s)
        Subject=&quot;$OPTARG&quot;
      ;;
      d)
        DestList+=(&quot;$OPTARG&quot;)
      ;;
    esac
  done
  
  for i in ${DestList[@]}
  do
    echo &quot;&quot; | mail -s &quot;$Subject&quot; $i
  done
}


#==============================================================================================
# Power Service Layer Simulation Engine (pslse) setup

echo;echo &quot;*******************************************************************************&quot;
echo &quot;J: Getting Power Service Layer Simulation Engine Environment (pslse)...&quot;
echo

echo;echo &quot;Deleting old ./pslse (Power Service Layer Simulation Engine) directory&quot;
rm -rf pslse

PSLSE_Branch=master

echo;echo &quot;Getting (git clone) PSL Simulation Environment branch=$PSLSE_Branch for card=$CRD...&quot;
git clone -b $PSLSE_Branch https://github.com/ibm-capi/pslse pslse; echo &quot;git clone PSLSE RC=$?&quot;

cd ${SNAP_ROOT}
echo;echo &quot;Exporting PSLSE directory as : ${USERHOME}/pslse into snap_env.sh&quot;
echo &quot;export PSLSE_ROOT=$USERHOME/pslse&quot; &gt;snap_env.sh
echo &quot;#PSL_DCP not included in Simulation, replaced anyhow by PSLSE&quot; &gt;&gt;snap_env.sh
echo &quot;#export PSL_DCP=/afs/bb/proj/fpga/framework/cards/$CRD/current/b_route_design.dcp&quot; &gt;&gt;snap_env.sh
echo &quot;#setup: XILINX_LOCAL_USER_DATA=${XILINX_LOCAL_USER_DATA}, overwrite=no to prevent write access error in XilincTclStore (tclapp:load_apps)&quot; &gt;&gt;snap_env.sh
echo &quot;export XILINX_LOCAL_USER_DATA=no&quot; &gt;&gt; snap_env.sh

# FAB: but why ??
#case $CRD in 
#  &apos;N250SP&apos;) #echo &quot;export PSL_IP_CORE=/afs/bb/proj/fpga/framework/cards/N250SP/ibm.com_CAPI_PSL9_WRAP_2.00.zip&quot; &gt;&gt;snap_env.sh
#			echo &quot;export HDK_ROOT=/afs/bb/proj/fpga/framework/cards/N250SP/HDK&quot; &gt;&gt;snap_env.sh
#            ;;
#  *)        ;;    
#esac 



#==============================================================================================
# Setting up Vivado and Timing value

echo;echo &quot;****************************************************************************************&quot;
echo &quot;J: Setting up Vivado Version and timing value&quot;
echo

export VIV_VERSION=$VIV
echo &quot;Vivado SETUP $VIV_VERSION ...&quot;

# FAB: TIMING_LABLIMIT. On le configure ?

echo;echo &quot;****************************************************************************************&quot; 
echo &quot;J: Vivado paths &amp; licences server setup ...&quot;
echo
export XILINX_ROOT=/opt/Xilinx
#export XILINX_ROOT=/afs/bb/proj/fpga/xilinx
export XILINXD_LICENSE_FILE=2100@pokwinlic1.pok.ibm.com
echo &quot;  -&gt; Xilinx License access: $XILINXD_LICENSE_FILE&quot;
echo &quot;  -&gt; sourcing $XILINX_ROOT/Vivado/${VIV_VERSION}/settings64.sh&quot;
source $XILINX_ROOT/Vivado/${VIV_VERSION}/settings64.sh


#==============================================================================================
# Cadence setup

# FAB: No cadence setup at MOP
#echo;echo &quot;****************************************************************************************&quot; 
#echo &quot;J: Cadence SETUP ...&quot;
#case $SIM:$VIV in
#  xcelium:2018.2 ) echo &quot;Cadence SETUP $IES_VERSION for Vivado 2018.2&quot;
#    export PATH=$CDS_INST_DIR/tools/bin:$PATH
#    export CDS_LIC_FILE=1716@rchlic1.rchland.ibm.com:1716@rchlic2.rchland.ibm.com:1716@rchlic3.rchland.ibm.com
#    export LD_LIBRARY_PATH=$CDS_INST_DIR/tools/lib/64bit:$LD_LIBRARY_PATH
#    if [ -f &quot;$IES_LIBS/cds.lib&quot; ]; then 
#      echo &quot;IES_LIBS found in $IES_LIBS&quot;
#    else
#      echo &quot;WARNING: cannot find IES_LIBS=$IES_LIBS, Cadence compilation won&apos;t work&quot;
#      exit 1
#    fi;;
#  irun:*|IRUN:*|xcelium:* ) echo &quot;Cadence SETUP $IES_VERSION for Vivado 2018.1&quot;
#    export PATH=$CDS_INST_DIR/tools/bin:$PATH
#    export CDS_LIC_FILE=1716@rchlic1.rchland.ibm.com:1716@rchlic2.rchland.ibm.com:1716@rchlic3.rchland.ibm.com
#    export LD_LIBRARY_PATH=$CDS_INST_DIR/tools/lib/64bit:$LD_LIBRARY_PATH
#    if [ -f &quot;$IES_LIBS/cds.lib&quot; ]; then 
#      echo &quot;IES_LIBS found in $IES_LIBS&quot;
#    else
#      echo &quot;WARNING: cannot find IES_LIBS=$IES_LIBS, Cadence compilation won&apos;t work&quot;
#      exit 1
#    fi;;
#esac

#case $ACT in 
#  *&quot;nvme&quot;*|*&quot;NVME&quot;*) echo &quot;Denali SETUP ...&quot;
#    export DENALI=/afs/bb/proj/cte/tools/cds/VIPCAT/11.30.037/tools.lnx86/denali_64bit
#export CDS_LIC_FILE=1716@rchlic1.rchland.ibm.com:1716@rchlic2.rchland.ibm.com:1716@rchlic3.rchland.ibm.com
#    ;;
#esac
#echo &quot;CDS_LIC_FILE=${CDS_LIC_FILE}&quot;


#==============================================================================================
# If ACT=test just doing nothing (exit 0),
# else making $CRD.$ACT.defconfig

echo;echo &quot;****************************************************************************************&quot; 

case $ACT in                    # select config &amp; compile action

  &apos;test&apos;) 
    echo &quot;J: ACT=$ACT ==&gt; skiping model building&quot;;echo
    echo &quot;            ==&gt; Just EXITING !&quot;
    exit 0
    ;;
    
  &apos;hls_intersect_h&apos;)  
    echo &quot;J: ACT=$ACT (hash) ==&gt; Configuring image thanks to $CRD.hls_intersect.defconfig file and doing make clean_config_h ...&quot;;echo
    make $CRD.hls_intersect.defconfig
    source ./snap_env.sh        # execute to exploit ACTION_ROOT
    make -C ${ACTION_ROOT} clean config_h
    ;;
    
  &apos;hls_intersect_s&apos;)  
    echo &quot;J: ACT=$ACT (sort) ==&gt; Configuring image thanks to $CRD.hls_intersect.defconfig file and doing make clean_config_s ...&quot;;echo
    make $CRD.hls_intersect.defconfig
    source ./snap_env.sh        # execute to exploit ACTION_ROOT
    make -C ${ACTION_ROOT} clean config_s
    ;;
    
  *DENALI*)
    act2=${ACT%.DENALI}
    echo &quot;J: ACT=$ACT ==&gt; Configuring image thanks to $CRD.$act2.defconfig file ...&quot;;echo  
    make $CRD.$act2.defconfig
    ;;
    
  *) 
    echo &quot;J: Generic case ==&gt; Just configuring image thanks to $CRD.$ACT.defconfig file...&quot;;echo
    make $CRD.$ACT.defconfig
    ;;
esac


#==============================================================================================
# Configure SIMULATOR and ACTION types

echo;echo &quot;****************************************************************************************&quot; 
echo &quot;J: Configuring SIMULATOR and ACTION types with SIMULATOR=$SIM and ACTION=$ACT&quot;

case $SIM:$ACT in
  &apos;xsim&apos;:* )
    echo &quot;export SIMULATOR=xsim&quot;     &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_XSIM=y&quot;                &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  &apos;irun&apos;:*DENALI )
    echo &quot;ENABLE_DENALI=y&quot;           &gt;&gt; .snap_config;make -s oldconfig
    echo &quot;export SIMULATOR=irun&quot;     &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_IRUN=y&quot;                &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  &apos;irun&apos;:* )
    echo &quot;export SIMULATOR=irun&quot;     &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_IRUN=y&quot;                &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  xcelium:*DENALI)
    echo &quot;ENABLE_DENALI=y&quot;           &gt;&gt; .snap_config;make -s oldconfig
  	echo &quot;export SIMULATOR=xcelium&quot;  &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_XCELIUM=y&quot;             &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  xcelium:*)
    echo &quot;export SIMULATOR=xcelium&quot;  &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_XCELIUM=y&quot;             &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  questa:*)
    echo &quot;export SIMULATOR=questa&quot;   &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_QUESTA=y&quot;              &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  modelsim:*)
    echo &quot;export SIMULATOR=modelsim&quot; &gt;&gt; .snap_config.sh
    sed -i &quot;s/^SIM_/# SIM_/&quot;         .snap_config
    echo &quot;SIM_MODELSIM=y&quot;            &gt;&gt; .snap_config   # overwrite simulator
    ;;
    
  *) 
    echo &quot;WARNING: unknown simulator=$SIM, continuing with default&quot;
    ;;
    
esac

# if memcopy with HBM requested, replacing HBM by BRAM
if grep &quot;HLS_HBM_MEMCOPY=y&quot; .snap_config &gt;/dev/null; then
  echo &quot;J: HLS_HBM_MEMCOPY requested:&quot;
  echo &quot;       -&gt; Modifying just generated .snap_config file with REPLACE_HBM_BY_BRAM=y (which implies BRAM_USED=\&quot;TRUE\&quot;) ...&quot;
  cat .snap_config | egrep  -v &quot;REPLACE_HBM_BY_BRAM|BRAM_USED&quot; &gt; tempofile
  echo &apos;REPLACE_HBM_BY_BRAM=y&apos; &gt;&gt; tempofile
  mv  tempofile .snap_config
  echo &quot;       -&gt; Running make oldconfig to re-generate clean .snap_config/.snap_config.sh files with  REPLACE_HBM_BY_BRAM/BRAM_USED parameters ...&quot;; echo
  make -s oldconfig
fi

echo
echo &quot;.snap_config:&quot;
echo &quot;-------------&quot;
cat .snap_config | grep -v &quot;^#&quot;
echo
echo &quot;.snap_config.sh:&quot;
echo &quot;----------------&quot;
cat .snap_config | grep -v &quot;^#&quot;


#==============================================================================================
# Build Simulation Model (make model)

echo;echo &quot;****************************************************************************************&quot; 
echo &quot;J: Building simulation model (make model)&quot;
echo

# execute with LSF, SNAP_ROOT must reside in AFS
#bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}_model&quot; &quot;make model&quot;|| exit 1

# alias make=&apos;/usr/bin/make -I $XILINX_ROOT/Vivado/${VIV_VERSION}/data/xsim/include/&apos;

echo &quot;XILINX_ROOT/Vivado/${VIV_VERSION}/data/xsim/include/ :&quot;
ls -lad $XILINX_ROOT/Vivado/${VIV_VERSION}/data/xsim/include/

echo &quot;XILINX_VIVADO = $XILINX_VIVADO&quot;

echo; echo &quot;ENV:&quot;
env
echo


make model ||RC=$?
if [ $RC -ne 0 ]; then
  echo &quot;make model FAILED !&quot;
  echo &quot; ==&gt; EXITING !&quot;
  exit 1
fi


#==============================================================================================
# Run $SIM simulation

echo;echo &quot;****************************************************************************************&quot; 
echo &quot;J: Running $SIM Simulation ...&quot;

cd ${SNAP_ROOT}/hardware/sim

# enable SW trace
#export SNAP_TRACE=0xf

# report error as unstable build
case $SIM in

  &apos;irun&apos; )
#    bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}&quot; &quot;./run_sim -irun -list testlist.sh -noaet&quot;||exit 100
    ./run_sim -irun -list testlist.sh -noaet || exit 100
    ;;
    
  *)
#    bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}&quot; &quot;./run_sim -list testlist.sh -noaet&quot;||exit 100
    ./run_sim -list testlist.sh -noaet || exit 100
    ;;
    
esac</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.37">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>300</timeoutMinutes>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.FailOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.10"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}}-${GIT_BRANCH}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
    <touchStoneCombinationFilter>ACT==&quot;test&quot; &amp;&amp; CRD==&quot;ADKU3&quot; &amp;&amp; SIM_VIV=~&quot;xsim&quot;</touchStoneCombinationFilter>
    <touchStoneResultCondition>
      <name>UNSTABLE</name>
      <ordinal>1</ordinal>
      <color>YELLOW</color>
      <completeBuild>true</completeBuild>
    </touchStoneResultCondition>
  </executionStrategy>
  <childCustomWorkspace>${BRANCH}/${COMBINATION}</childCustomWorkspace>
</matrix-project>