<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>transfer an already built image to the right card and test it&#xd;
for Questions: contact J.Kayser, A.Castellane or F.Moyen</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>3</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.4">
      <projectUrl>git@github.com:open-power/snap.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition plugin="extensible-choice-parameter@1.6.0">
          <name>mopIMGFile</name>
          <description>which image to load</description>
          <editable>false</editable>
          <editableType>NoFilter</editableType>
          <choiceListProvider class="jp.ikedam.jenkins.plugins.extensible_choice_parameter.FilenameChoiceListProvider">
            <baseDirPath>/data/Images</baseDirPath>
            <includePattern>*/fw*bin</includePattern>
            <scanType>File</scanType>
            <excludePattern></excludePattern>
            <reverseOrder>false</reverseOrder>
            <emptyChoiceType>None</emptyChoiceType>
          </choiceListProvider>
        </jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mopBoxes</name>
          <description>List of Montpellier systems available for testing
Marennes is a P8 (CAPI1 cards)
Brahma and lewen05 and yob594 are P9 (CAPI2.0 cards)
brahma marennes lewen05</description>
          <defaultValue>brahma lewen05</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CARDS</name>
          <description>CARDS=(ADKU3 AD8K5 S121B N250S N250SP AD9V3)</description>
          <defaultValue>N250SP AD9V3</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/OpenCAPI/oc-accel.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>snap</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.PruneStaleBranch/>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.29.4">
      <spec></spec>
    </com.cloudbees.jenkins.GitHubPushTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 0-8/4 * * *
H 18-23/4 * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set +x                               # reduce Jenkins output
ulimit -c unlimited                  # limit core dumps

#------------------------------------------------------------------------------------------------------------------------------
# Variables

TESTBOXES=(${mopBoxes[*]}) # init array of systems
CARDSList=($CARDS)

mopIMGRootDir=&quot;/data/Images&quot;
IMGFileName=$(basename $mopIMGFile)
mopIMGDir=$(dirname $mopIMGRootDir/$mopIMGFile)

ExecutorIMGRootDir=&quot;/home/fpga/images/single_test&quot;

echo &quot;testboxes1 : ${TESTBOXES[*]}&quot;
echo &quot;Cards list : ${CARDSList[*]}&quot;
echo &quot;running    : $mopIMGDir/$IMGFileName&quot;
echo &quot;working directory : $(pwd)&quot;

#------------------------------------------------------------------------------------------------------------------------------
# Functions

function die {     # define function to exit with msg: call with &quot;die [exit_RC] [msg]&quot;
  local RC=$1
  shift;
  local message=&quot;$@&quot;;
  [ -z &quot;$message&quot; ] &amp;&amp; message=&quot;Died&quot;
  echo &quot;$message at ${BASH_SOURCE[1]}:${FUNCNAME[1]} line ${BASH_LINENO[0]}.&quot; &gt;&amp;2
  exit 1
}

function finish {  # define function to unlock in case of error, executed after registering with &quot;trap finish EXIT&quot;
  echo &quot;RC=$?, now unlock ${LOCK} and end&quot;
  SSH_RC=0;ssh fpga@$box rmdir ${LOCK} || SSH_RC=$?
  echo &quot;`date` box=$box $LOCK unlock RC=$SSH_RC&quot;
}

#------------------------------------------------------------------------------------------------------------------------------
# Test if size file is coherent

size=`ls -al $mopIMGDir/$IMGFileName | awk &apos;{print $5}&apos;`
echo &quot;size of file is $size&quot;
(( $size &lt; 100000 ))          &amp;&amp; die 1 &quot;image $$mopIMGDir/$IMGFileName is too small $size to burn&quot;

#------------------------------------------------------------------------------------------------------------------------------
# Create a list of Cards sorted by card names&apos; length
#      This allows to search for N250SP card before N250S card for example
#      and prevents finding an N250S card when it is an N250SP in the Image file name

SortedCARDSString=$(for card in &quot;${CARDSList[@]}&quot;;do
  echo $card | awk &apos;{print length,$0}&apos;  
done | sort --reverse | cut -d&apos; &apos; -f2- )

SortedCARDSList=($SortedCARDSString)

#------------------------------------------------------------------------------------------------------------------------------
# Search for a card in the Image file name

for CRD in &quot;${SortedCARDSList[@]}&quot;;do
  if [[ &quot;$IMGFileName&quot; =~ &quot;$CRD&quot; ]];then echo &quot;found card=$CRD for image=$IMGFileName size=$size&quot;;break;fi
  if [ $CRD == ${SortedCARDSList[*]: -1} ];then die 100 &quot;cannot find card for image=$IMGFileName in cards=${CARDSList[*]}&quot;;fi
done

#------------------------------------------------------------------------------------------------------------------------------
# SPI8 Cards case: meaning primary and secondary IMG files

if echo $IMGFileName | egrep &quot;primary|secondary&quot; ; then
        echo &quot;SPI8 file detected&quot;;SPI8=1;
  else
         echo &quot;Not an SPI8 file&quot;;SPI8=0;
fi

# Generating ReducedFileName (without _primary.bin or _secondary.bin)
echo &quot;Reducing Image name to get the base name&quot;
if [ &quot;$SPI8&quot; -eq &quot;1&quot; ];then
        echo &quot;   SPI8 =&gt; Memorizing the primary and secondary image names&quot;
        ReducedFileName=&quot;${IMGFileName%_*}&quot;        # Get all the beginning up to the last &quot;_&quot; (removing &quot;_primary.bin&quot; or &quot;_secondary.bin&quot;)
        echo $ReducedFileName
        IMGPrimaryName=&quot;$(echo ${ReducedFileName}| sed &apos;s/ //g&apos;)_primary.bin&quot;  # need to remove blank in prefix
        IMGSecondaryName=&quot;$(echo ${ReducedFileName}| sed &apos;s/ //g&apos;)_secondary.bin&quot;
        echo &quot;CARD detected  is : $CRD&quot;
        echo &quot;Primary   file is : $IMGPrimaryName&quot;
        echo &quot;Secondary file is : $IMGSecondaryName&quot;

  else
        ReducedFileName=&quot;${IMGFileName%_*}&quot;;       # Get all the beginning up to the last &quot;_&quot; (removing &quot;_primary.bin&quot; or &quot;_secondary.bin&quot;)
        echo $ReducedFileName;
fi

#------------------------------------------------------------------------------------------------------------------------------
# Test if boxes in TESTBOXES are accessible

for box in &quot;${TESTBOXES[@]}&quot;;do
      
  if [[ ${mopBoxes[*]} =~ $box ]]
  then
     # $box is a Montpellier server
     bindir=&quot;/home/fpga/&quot;
     RC=0;ssh fpga@$box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
  fi

  if [ &quot;$RC&quot; == &quot;0&quot; ]; then : 
    echo &quot;$box ping ok&quot;;
  else
    for i in &quot;${TESTBOXES[@]}&quot;; do [[ $i != $box ]] &amp;&amp; new+=($i);done   # generate new test array without unreachable box
    unset TESTBOXES;TESTBOXES=(&quot;${new[@]}&quot;);unset new                   # reassign to original array name
    echo &quot;$box not pingable, remove from testing, remaining=${TESTBOXES[@]}&quot;
    if [[ &quot;${TESTBOXES[@]}&quot; == &quot;&quot; ]];then echo &quot;no test machines avail anymore&quot;;exit 1;fi
  fi
done # for box

echo &quot;testboxes2=${TESTBOXES[@]}&quot;

#------------------------------------------------------------------------------------------------------------------------------
# Waiting for available $CRD in ${TESTBOXES[*]}

maxloop=60; echo &quot;Wait (max $maxloop min) for free card=$CRD in ${TESTBOXES[@]} iam=`whoami`&quot;

for loop in `seq 1 $maxloop`;do
  for box in &quot;${TESTBOXES[@]}&quot;;do 
    users=`ssh fpga@${box} who|grep -v root|grep -v fpga|grep -v sinitame | awk &apos;{print $1}&apos; | sort -u `
    nusers=`echo $users | wc -w`
	  echo &quot;$nusers connected on $box :&quot;
    echo $users
    
    #Sending a message to all users connected to $box
    if [ $nusers -ge 1 ];then
      for user in $users
      do
   	    ssh fpga@$box &quot;echo &apos;JENKINS IS TRYING TO RUN A TEST ON $box WITH $CRD FPGA ADAPTER, CAN YOU LOGOUT ? THANKS&apos; | write $user&quot;
      done
    fi

    echo &quot;J:getting ${CRD} card position on ${box}:&quot;
    found=0;cards=`ssh -ttq fpga@${box} /home/fpga/snap_find_card -A ${CRD}`||found=$?
    hours=`date +%H`
	  echo &quot;`date` loop=$loop box=$box nusers=$nusers card=$CRD snap_find_card found=$found&quot;

    case $found:$nusers in

      0:*)      
        if [ $box == ${TESTBOXES[*]:(-1)} ];then echo &quot;wait...&quot;;sleep 1;fi
        for i in &quot;${TESTBOXES[@]}&quot;; do [[ $i != $box ]] &amp;&amp; new+=($i);done   # generate new test array without unreachable box
        unset TESTBOXES;TESTBOXES=(&quot;${new[@]}&quot;);unset new                   # reassign to original array name
        echo &quot;card not avail in $box, remove from testing, remaining=${TESTBOXES[@]}&quot;
        continue;;

      [1234]:0)
        for cardid in $cards;do
          LOCK=&quot;jenkins_lock_card&quot;$cardid
		      RC=0;ssh fpga@$box &quot;mkdir ${LOCK} 2&gt;/dev/null&quot;||RC=$?
		      if [ $RC == &quot;0&quot; ]; then :
		        echo &quot;`date` box=$box $LOCK lock RC=$RC&quot;; 
		        trap finish EXIT  # register finish/unlock function, after lock is set
		        break 3
		      else 
		        echo &quot;box=$box $LOCK already locked, try next card&quot;
		      fi    
        done;;

      *:0)      
        echo &quot;unknown found_RC=$found from snap_find_card=$cards&quot;; 
        exit 100;;

      *) 
        if (( 9&lt;=hours &amp;&amp; hours&lt;=19 ));then
          echo &quot;hours=$hours, nusers=$nusers, try other box if any, users are logged preventing test to run&quot;
          if [ $box == ${TESTBOXES[*]:(-1)} ];then echo &quot;wait...&quot;;sleep 60;fi
          continue
        else
          ssh fpga@${box} who|grep -v root|grep -v fpga
          echo &quot;hours=$hours, nusers=$nusers, now lock &amp; notify &amp; test&quot;
		      for cardid in $cards;do
      	    LOCK=&quot;jenkins_lock_card&quot;$cardid
		        RC=0;ssh fpga@$box &quot;mkdir ${LOCK} 2&gt;/dev/null&quot;||RC=$?
		        if [ $RC == &quot;0&quot; ]; then :
	  	        echo &quot;`date` box=$box $LOCK lock RC=$RC&quot;; 
	   	        trap finish EXIT  # register finish/unlock function, after lock is set
              ssh fpga@$box wall &quot;WARNING: JENKINS TEST on FPGA CARD=$CRD ID=$cards&quot;
		          break 3
		        else 
			        echo &quot;box=$box $LOCK already locked, try next card&quot;
		        fi    
          done
        fi;;
    esac
  done # for box
done #for loop

if [ &quot;$loop&quot; == &quot;$maxloop&quot; ];then echo &quot;`date` no card avail&quot;;exit 1;fi

ssh fpga@${box} &quot;echo ------ START of JOB on $box ----&gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;date                                 &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo JOB_NAME  : $JOB_NAME           &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo Card      : $CRD[$cardid]       &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo Image     : /home/fpga/$IMGFileName &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo Project_name: ${PROJECT_NAME}   &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo Build No  : ${BUILD_NUMBER}     &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo Git Branch: ${GIT_BRANCH}       &gt;&gt; jenkins.log&quot;
ssh fpga@$box tail -n8 jenkins.log

#------------------------------------------------------------------------------------------------------------------------------
# Copying Working directory TARGET_DIR into $box:/home/fpga

pwd=`pwd`
echo &quot;pwd=$pwd&quot;
TARGET_DIR=&quot;`basename $pwd`-${ReducedFileName}-${BUILD_NUMBER}&quot;
RUN=&quot;./actions/scripts/snap_jenkins.sh&quot;
echo &quot;create project dir, if not avail&quot;;      ssh fpga@$box mkdir -p ${TARGET_DIR}
echo &quot;Copy workspace ${TARGET_DIR} to ${box}&quot;;rsync -az snap/ ${box}:/home/fpga/${TARGET_DIR}
#echo &quot;remote workspace content6:&quot;;           ssh fpga@$box ls -al ${TARGET_DIR}

#------------------------------------------------------------------------------------------------------------------------------
# Copying Image(s) into $box:/home/fpga/images

echo &quot;mkdir ${ExecutorIMGRootDir}/$CRD, if not avail&quot;;            ssh fpga@$box mkdir -p ${ExecutorIMGRootDir}/$CRD

if [ &quot;$SPI8&quot; -eq &quot;1&quot; ];then
	echo &quot;J: COPY Image $IMGPrimaryName   to $box:${ExecutorIMGRootDir}/$CRD&quot;;            rsync -az   $mopIMGDir/$IMGPrimaryName ${box}:${ExecutorIMGRootDir}/$CRD
	echo &quot;J: COPY Image $IMGSecondaryName to $box:${ExecutorIMGRootDir}/$CRD&quot;;            rsync -az $mopIMGDir/$IMGSecondaryName ${box}:${ExecutorIMGRootDir}/$CRD
  RUN+=&quot; -D ${TARGET_DIR}&quot;
	if [ -z ${mopIMGFile} ]; then RUN+=&quot; -A ALL&quot;;else RUN+=&quot; -F ${ExecutorIMGRootDir}/$CRD/$IMGPrimaryName -f ${ExecutorIMGRootDir}/$CRD/$IMGSecondaryName -A ${CRD} -C $cardid&quot;;fi

else
	echo &quot;J: COPY Image $IMGFileName to $box:${ExecutorIMGRootDir}/$CRD&quot;;            rsync -az $mopIMGDir/$IMGFileName ${box}:${ExecutorIMGRootDir}/$CRD
	RUN+=&quot; -D ${TARGET_DIR}&quot;
	if [ -z ${mopIMGFile} ]; then RUN+=&quot; -A ALL&quot;;else RUN+=&quot; -F ${ExecutorIMGRootDir}/$CRD/$IMGFileName -A ${CRD} -C $cardid&quot;;fi
fi

#------------------------------------------------------------------------------------------------------------------------------
# Build the software into $TARGET_DIR on the $box

echo &quot;***************************************************************************************&quot;
echo &quot;Build the software and actions on $box in $TARGET_DIR...&quot;
ssh fpga@$box make -C ${TARGET_DIR} clean software actions

echo  &quot;copy new snap_find_card to homedir&quot;;  
ssh fpga@$box cp ${TARGET_DIR}/software/tools/snap_find_card .

#------------------------------------------------------------------------------------------------------------------------------
# Execute the $RUN command on the $box

echo &quot;***************************************************************************************&quot;
echo &quot;`date` Execute Test: $RUN on $box&quot;
RC=0
ssh -T fpga@${box} &lt;&lt; EOF || RC=$?
	export TERM=xterm
	cd ${TARGET_DIR}
	set -f
    ulimit -c unlimited               # limit core dumps
    ${RUN}
EOF
ssh fpga@${box} &quot;echo Exit: $JOB_NAME RC = $RC at:\      &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;date                                    &gt;&gt; jenkins.log&quot;
ssh fpga@${box} &quot;echo ------ EXIT -----------------------&gt;&gt; jenkins.log&quot;

#------------------------------------------------------------------------------------------------------------------------------
# Do Clean-up work: $TARGET_DIR on the $box, and image files at MOPJENKINS site
echo
echo &quot;------------------------------------------------------------------------------------------------&quot;
if [ &quot;$RC&quot; == &quot;0&quot; ]; then : 
  echo &quot;Job return code is good ==&gt;&quot;
  echo &quot;   Cleaning working dir on $box&quot;
  echo &quot;   Cleaning images in $mopIMGDir&quot;
  echo &quot;   Moving Primary/secondary image file to good.* inside $box:$ExecutorIMGRootDir/$CRD&quot;
  echo &quot;     (needs to be done because SNAP github script does not manage Primary/Secondary files for the moment)&quot;
  echo
  echo &quot;`date` Clean up ${TARGET_DIR} on ${box}&quot;;  ssh fpga@$box rm -rf ${TARGET_DIR}

# Fab for testing/debug
  echo &quot;`date` FABRICE- NOT Removing $mopIMGDir/$IMGPrimaryName (for debug)&quot;
#  echo &quot;`date` Remove $mopIMGDir/$IMGPrimaryName&quot;;       rm $mopIMGDir/$IMGPrimaryName
  echo &quot;`date` FABRICE- NOT Removing $mopIMGDir/$IMGSecondaryName (for debug)&quot;
#  echo &quot;`date` Remove $mopIMGDir/$IMGSecondaryName&quot;;       rm $mopIMGDir/$IMGSecondaryName

  echo &quot;`date` Renaming good.* primary/secondary files on ${box}&quot;
  ssh fpga@${box} &quot;mv \`ls $ExecutorIMGRootDir/$CRD/${IMGPrimaryName}*\` $ExecutorIMGRootDir/$CRD/good.$IMGPrimaryName&quot;
  ssh fpga@${box} &quot;mv \`ls $ExecutorIMGRootDir/$CRD/${IMGSecondaryName}*\` $ExecutorIMGRootDir/$CRD/good.$IMGSecondaryName&quot;

  echo
else 
  die 100 &quot;`date` Test failed RC = $RC, exit UNSTABLE&quot;
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.github.status.GitHubCommitStatusSetter plugin="github@1.29.4">
      <commitShaSource class="org.jenkinsci.plugins.github.status.sources.BuildDataRevisionShaSource"/>
      <reposSource class="org.jenkinsci.plugins.github.status.sources.AnyDefinedRepositorySource"/>
      <contextSource class="org.jenkinsci.plugins.github.status.sources.ManuallyEnteredCommitContextSource">
        <context>${PROJECT_NAME} ${GIT_BRANCH}</context>
      </contextSource>
      <statusResultSource class="org.jenkinsci.plugins.github.status.sources.ConditionalStatusResultSource">
        <results>
          <org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
            <state>PENDING</state>
            <message>SUCCESS</message>
            <result>SUCCESS</result>
          </org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
          <org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
            <state>FAILURE</state>
            <message>FAILURE</message>
            <result>FAILURE</result>
          </org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
          <org.jenkinsci.plugins.github.status.sources.misc.AnyBuildResult>
            <state>PENDING</state>
            <message>PENDING</message>
          </org.jenkinsci.plugins.github.status.sources.misc.AnyBuildResult>
        </results>
      </statusResultSource>
      <statusBackrefSource class="org.jenkinsci.plugins.github.status.sources.BuildRefBackrefSource"/>
      <errorHandlers/>
    </org.jenkinsci.plugins.github.status.GitHubCommitStatusSetter>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.18">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <tokenCredentialId></tokenCredentialId>
      <botUser>false</botUser>
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>false</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
      <customMessageSuccess></customMessageSuccess>
      <customMessageAborted></customMessageAborted>
      <customMessageNotBuilt></customMessageNotBuilt>
      <customMessageUnstable></customMessageUnstable>
      <customMessageFailure></customMessageFailure>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>1200</timeoutMinutes>
      </strategy>
      <operationList/>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.1">
      <template>${PROJECT_NAME} #${BUILD_NUMBER}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>